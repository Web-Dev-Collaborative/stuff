/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package github.com/gitpod-io/gitpod/licensor/typescript/ee */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h> /* for ptrdiff_t below */

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */




/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef __SIZE_TYPE__ GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif


// Init initalizes the global license evaluator from an environment variable
extern GoInt Init(char* key, char* domain);

/* Return type for Validate */
struct Validate_return {
	char* r0; /* msg */
	GoUint8 r1; /* valid */
};

// Validate returns false if the license isn't valid and a message explaining why that is.
extern struct Validate_return Validate(GoInt id);

/* Return type for Enabled */
struct Enabled_return {
	GoUint8 r0; /* enabled */
	GoUint8 r1; /* ok */
};

// Enabled returns true if a license enables a feature
extern struct Enabled_return Enabled(GoInt id, char* feature);

/* Return type for HasEnoughSeats */
struct HasEnoughSeats_return {
	GoUint8 r0; /* permitted */
	GoUint8 r1; /* ok */
};

// HasEnoughSeats returns true if the license supports at least the given number of seats.
extern struct HasEnoughSeats_return HasEnoughSeats(GoInt id, GoInt seats);

/* Return type for CanUsePrebuild */
struct CanUsePrebuild_return {
	GoUint8 r0; /* permitted */
	GoUint8 r1; /* ok */
};

// CanUsePrebuild returns true if the use a prebuild is permissible under the license,
// given the total prebuild time used already.
extern struct CanUsePrebuild_return CanUsePrebuild(GoInt id, GoInt64 totalSecondsUsed);

/* Return type for Inspect */
struct Inspect_return {
	char* r0; /* lic */
	GoUint8 r1; /* ok */
};

// Inspect returns the license information this evaluator holds.
extern struct Inspect_return Inspect(GoInt id);

// Dispose removes/disposes an instance formerly created using Init. If the id does not exist, nothing happens.
extern void Dispose(GoInt id);

#ifdef __cplusplus
}
#endif
