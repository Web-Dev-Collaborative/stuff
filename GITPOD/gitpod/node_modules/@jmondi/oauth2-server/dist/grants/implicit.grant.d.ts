import { AuthorizationRequest } from "../requests/authorization.request";
import { RequestInterface } from "../requests/request";
import { ResponseInterface } from "../responses/response";
import { DateInterval } from "../utils/date_interval";
import { AbstractAuthorizedGrant } from "./abstract/abstract_authorized.grant";
export declare class ImplicitGrant extends AbstractAuthorizedGrant {
    readonly identifier = "implicit";
    private accessTokenTTL;
    respondToAccessTokenRequest(req: RequestInterface, res: ResponseInterface, tokenTTL: DateInterval): Promise<ResponseInterface>;
    canRespondToAccessTokenRequest(request: RequestInterface): boolean;
    validateAuthorizationRequest(request: RequestInterface): Promise<AuthorizationRequest>;
    completeAuthorizationRequest(authorizationRequest: AuthorizationRequest): Promise<ResponseInterface>;
}
