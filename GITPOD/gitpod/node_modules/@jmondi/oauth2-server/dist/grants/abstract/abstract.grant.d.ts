/// <reference types="node" />
import { AuthorizationServerOptions } from "../../authorization_server";
import { OAuthClient } from "../../entities/client.entity";
import { OAuthScope } from "../../entities/scope.entity";
import { OAuthToken } from "../../entities/token.entity";
import { OAuthUser } from "../../entities/user.entity";
import { OAuthTokenRepository } from "../../repositories/access_token.repository";
import { OAuthAuthCodeRepository } from "../../repositories/auth_code.repository";
import { OAuthClientRepository } from "../../repositories/client.repository";
import { OAuthScopeRepository } from "../../repositories/scope.repository";
import { ExtraAccessTokenFields, OAuthUserRepository } from "../../repositories/user.repository";
import { AuthorizationRequest } from "../../requests/authorization.request";
import { RequestInterface } from "../../requests/request";
import { BearerTokenResponse } from "../../responses/bearer_token.response";
import { ResponseInterface } from "../../responses/response";
import { DateInterval } from "../../utils/date_interval";
import { JwtInterface } from "../../utils/jwt";
import { GrantIdentifier, GrantInterface } from "./grant.interface";
export interface ITokenData {
    iss: undefined;
    sub: string | undefined;
    aud: undefined;
    exp: number;
    nbf: number;
    iat: number;
    jti: string;
    cid: string;
    scope: string;
}
export declare abstract class AbstractGrant implements GrantInterface {
    protected readonly authCodeRepository: OAuthAuthCodeRepository;
    protected readonly clientRepository: OAuthClientRepository;
    protected readonly tokenRepository: OAuthTokenRepository;
    protected readonly scopeRepository: OAuthScopeRepository;
    protected readonly userRepository: OAuthUserRepository;
    protected readonly jwt: JwtInterface;
    readonly options: AuthorizationServerOptions;
    protected readonly scopeDelimiterString = " ";
    protected readonly supportedGrantTypes: GrantIdentifier[];
    abstract readonly identifier: GrantIdentifier;
    constructor(authCodeRepository: OAuthAuthCodeRepository, clientRepository: OAuthClientRepository, tokenRepository: OAuthTokenRepository, scopeRepository: OAuthScopeRepository, userRepository: OAuthUserRepository, jwt: JwtInterface);
    makeBearerTokenResponse(client: OAuthClient, accessToken: OAuthToken, scopes?: OAuthScope[], extraJwtFields?: ExtraAccessTokenFields): Promise<BearerTokenResponse>;
    protected encryptRefreshToken(client: OAuthClient, refreshToken: OAuthToken, scopes: OAuthScope[]): Promise<string>;
    protected encryptAccessToken(client: OAuthClient, accessToken: OAuthToken, scopes: OAuthScope[], extraJwtFields: ExtraAccessTokenFields): Promise<string>;
    protected validateClient(request: RequestInterface): Promise<OAuthClient>;
    protected getClientCredentials(request: RequestInterface): [string, string | undefined];
    protected getBasicAuthCredentials(request: RequestInterface): string[] | undefined[];
    protected validateScopes(scopes?: undefined | string | string[], redirectUri?: string): Promise<OAuthScope[]>;
    protected issueAccessToken(accessTokenTTL: DateInterval, client: OAuthClient, user?: OAuthUser, scopes?: OAuthScope[]): Promise<OAuthToken>;
    issueRefreshToken(accessToken: OAuthToken): Promise<OAuthToken>;
    private getGrantType;
    protected getRequestParameter(param: string, request: RequestInterface, defaultValue?: any): any;
    protected getQueryStringParameter(param: string, request: RequestInterface, defaultValue?: any): any;
    protected encrypt(unencryptedData: string | Buffer | Record<string, unknown>): Promise<string>;
    protected decrypt(encryptedData: string): Promise<Record<string, unknown>>;
    validateAuthorizationRequest(request: RequestInterface): Promise<AuthorizationRequest>;
    canRespondToAccessTokenRequest(request: RequestInterface): boolean;
    canRespondToAuthorizationRequest(request: RequestInterface): boolean;
    completeAuthorizationRequest(authorizationRequest: AuthorizationRequest): Promise<ResponseInterface>;
    respondToAccessTokenRequest(req: RequestInterface, res: ResponseInterface, tokenTTL: DateInterval): Promise<ResponseInterface>;
}
