import { AuthorizationRequest } from "../requests/authorization.request";
import { RequestInterface } from "../requests/request";
import { ResponseInterface } from "../responses/response";
import { DateInterval } from "../utils/date_interval";
import { AbstractAuthorizedGrant } from "./abstract/abstract_authorized.grant";
import { GrantIdentifier } from "./abstract/grant.interface";
export interface IAuthCodePayload {
    client_id: string;
    auth_code_id: string;
    expire_time: number;
    scopes: string[];
    user_id?: string;
    redirect_uri?: string;
    code_challenge?: string;
    code_challenge_method?: string;
}
export declare const REGEXP_CODE_CHALLENGE: RegExp;
export declare const REGEXP_CODE_VERIFIER: RegExp;
export declare const REGEX_ACCESS_TOKEN: RegExp;
export declare class AuthCodeGrant extends AbstractAuthorizedGrant {
    readonly identifier: GrantIdentifier;
    protected authCodeTTL: DateInterval;
    private codeChallengeVerifiers;
    respondToAccessTokenRequest(request: RequestInterface, response: ResponseInterface, accessTokenTTL: DateInterval): Promise<ResponseInterface>;
    canRespondToAuthorizationRequest(request: RequestInterface): boolean;
    validateAuthorizationRequest(request: RequestInterface): Promise<AuthorizationRequest>;
    completeAuthorizationRequest(authorizationRequest: AuthorizationRequest): Promise<ResponseInterface>;
    private validateAuthorizationCode;
    private issueAuthCode;
}
