import { GrantIdentifier } from "./grants/abstract/grant.interface";
import { OAuthTokenRepository } from "./repositories/access_token.repository";
import { OAuthAuthCodeRepository } from "./repositories/auth_code.repository";
import { OAuthClientRepository } from "./repositories/client.repository";
import { OAuthScopeRepository } from "./repositories/scope.repository";
import { OAuthUserRepository } from "./repositories/user.repository";
import { AuthorizationRequest } from "./requests/authorization.request";
import { RequestInterface } from "./requests/request";
import { ResponseInterface } from "./responses/response";
import { DateInterval } from "./utils/date_interval";
import { JwtInterface } from "./utils/jwt";
export interface AuthorizationServerOptions {
    requiresPKCE: boolean;
}
export declare class AuthorizationServer {
    private readonly authCodeRepository;
    private readonly clientRepository;
    private readonly tokenRepository;
    private readonly scopeRepository;
    private readonly userRepository;
    private readonly jwt;
    private readonly enabledGrantTypes;
    private readonly grantTypeAccessTokenTTL;
    private readonly availableGrants;
    private options;
    constructor(authCodeRepository: OAuthAuthCodeRepository, clientRepository: OAuthClientRepository, tokenRepository: OAuthTokenRepository, scopeRepository: OAuthScopeRepository, userRepository: OAuthUserRepository, jwt: JwtInterface, options?: Partial<AuthorizationServerOptions>);
    setOptions(options?: Partial<AuthorizationServerOptions>): void;
    enableGrantType(grantType: GrantIdentifier, accessTokenTTL?: DateInterval): void;
    respondToAccessTokenRequest(req: RequestInterface, res: ResponseInterface): Promise<ResponseInterface>;
    validateAuthorizationRequest(req: RequestInterface): Promise<AuthorizationRequest>;
    completeAuthorizationRequest(authorizationRequest: AuthorizationRequest): Promise<ResponseInterface>;
    getGrant(grantType: GrantIdentifier): any;
}
