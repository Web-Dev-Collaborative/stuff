import crypto from 'crypto';
import ms from 'ms';
import querystring from 'querystring';
import { parse } from 'uri-js';
import jwt from 'jsonwebtoken';

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _construct(Parent, args, Class) {
  if (_isNativeReflectConstruct()) {
    _construct = Reflect.construct;
  } else {
    _construct = function _construct(Parent, args, Class) {
      var a = [null];
      a.push.apply(a, args);
      var Constructor = Function.bind.apply(Parent, a);
      var instance = new Constructor();
      if (Class) _setPrototypeOf(instance, Class.prototype);
      return instance;
    };
  }

  return _construct.apply(null, arguments);
}

function _isNativeFunction(fn) {
  return Function.toString.call(fn).indexOf("[native code]") !== -1;
}

function _wrapNativeSuper(Class) {
  var _cache = typeof Map === "function" ? new Map() : undefined;

  _wrapNativeSuper = function _wrapNativeSuper(Class) {
    if (Class === null || !_isNativeFunction(Class)) return Class;

    if (typeof Class !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }

    if (typeof _cache !== "undefined") {
      if (_cache.has(Class)) return _cache.get(Class);

      _cache.set(Class, Wrapper);
    }

    function Wrapper() {
      return _construct(Class, arguments, _getPrototypeOf(this).constructor);
    }

    Wrapper.prototype = Object.create(Class.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    return _setPrototypeOf(Wrapper, Class);
  };

  return _wrapNativeSuper(Class);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var runtime_1 = createCommonjsModule(function (module) {
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined$1; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
    return obj[key];
  }
  try {
    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
    define({}, "");
  } catch (err) {
    define = function(obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunction.displayName = define(
    GeneratorFunctionPrototype,
    toStringTagSymbol,
    "GeneratorFunction"
  );

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      define(prototype, method, function(arg) {
        return this._invoke(method, arg);
      });
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      define(genFun, toStringTagSymbol, "GeneratorFunction");
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;

    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList),
      PromiseImpl
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined$1) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined$1;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined$1;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  define(Gp, toStringTagSymbol, "Generator");

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined$1;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined$1, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined$1;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined$1;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined$1;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined$1;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined$1;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
   module.exports 
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  Function("r", "regeneratorRuntime = r")(runtime);
}
});

var HttpStatus = {
  NOT_ACCEPTABLE: 406,
  BAD_REQUEST: 400,
  UNAUTHORIZED: 401,
  INTERNAL_SERVER_ERROR: 500,
  OK: 200
};
var ErrorType;

(function (ErrorType) {
  ErrorType["InvalidRequest"] = "invalid_request";
  ErrorType["InvalidClient"] = "invalid_client";
  ErrorType["InvalidGrant"] = "invalid_grant";
  ErrorType["InvalidScope"] = "invalid_scope";
  ErrorType["UnauthorizedClient"] = "unauthorized_client";
  ErrorType["UnsupportedGrantType"] = "unsupported_grant_type";
  ErrorType["AccessDenied"] = "access_denied";
})(ErrorType || (ErrorType = {}));

var OAuthException = /*#__PURE__*/function (_Error) {
  _inheritsLoose(OAuthException, _Error);

  function OAuthException(error, errorType, errorDescription, errorUri, status) {
    var _this;

    if (status === void 0) {
      status = HttpStatus.BAD_REQUEST;
    }

    _this = _Error.call(this, errorDescription ? error + ": " + errorDescription : error) || this;
    _this.error = error;
    _this.errorType = errorType;
    _this.errorDescription = errorDescription;
    _this.errorUri = errorUri;
    _this.status = status;
    Error.captureStackTrace(_assertThisInitialized(_this), _this.constructor);
    _this.name = _this.constructor.name;
    return _this;
  }

  OAuthException.invalidRequest = function invalidRequest(parameter, errorDescription) {
    var message = "The request is missing a required parameter, includes an invalid parameter value, ";
    message += "includes a parameter more than once, or is otherwise malformed";
    errorDescription = errorDescription ? errorDescription : "Check the `" + parameter + "` parameter";
    return new OAuthException(message, ErrorType.InvalidRequest, errorDescription);
  };

  OAuthException.invalidClient = function invalidClient(errorDescription) {
    return new OAuthException("Client authentication failed", ErrorType.InvalidClient, errorDescription, undefined, HttpStatus.UNAUTHORIZED);
  };

  OAuthException.invalidGrant = function invalidGrant(errorDescription) {
    var message = "The provided authorization grant (e.g., authorization_code, client_credentials) or refresh token ";
    message += "is invalid, expired, revoked, or does not match the redirection URI used in the authorization ";
    message += "request, or was issued to another client";
    return new OAuthException(message, ErrorType.InvalidGrant, errorDescription);
  };

  OAuthException.invalidScope = function invalidScope(scope, redirectUri) {
    var message = "The requested scope is invalid, unknown, or malformed";
    var hint = "Specify a scope in the request or set a default scope";

    if (scope) {
      hint = "Check the `" + scope + "` scope(s)";
    }

    return new OAuthException(message, ErrorType.InvalidScope, hint, redirectUri);
  };

  OAuthException.unauthorizedClient = function unauthorizedClient() {
    return new OAuthException("unauthorized client", ErrorType.UnauthorizedClient);
  };

  OAuthException.unsupportedGrantType = function unsupportedGrantType() {
    return new OAuthException("unsupported grant_type", ErrorType.UnsupportedGrantType);
  };

  OAuthException.logicException = function logicException(message) {
    return new OAuthException(message, ErrorType.InvalidRequest);
  };

  OAuthException.accessDenied = function accessDenied(errorDescription) {
    return new OAuthException("The resource owner or authorization server denied the request", ErrorType.AccessDenied, errorDescription, undefined, HttpStatus.UNAUTHORIZED);
  };

  return OAuthException;
}( /*#__PURE__*/_wrapNativeSuper(Error));

var PlainVerifier = /*#__PURE__*/function () {
  function PlainVerifier() {
    this.method = "plain";
  }

  var _proto = PlainVerifier.prototype;

  _proto.verifyCodeChallenge = function verifyCodeChallenge(codeVerifier, codeChallenge) {
    return codeChallenge === codeVerifier;
  };

  return PlainVerifier;
}();

function base64encode(str) {
  if (typeof str === "string") str = Buffer.from(str);
  return str.toString("base64");
}
function base64decode(str) {
  if (typeof str === "string") str = Buffer.from(str, "base64");
  return str.toString("binary");
}
function base64urlencode(str) {
  return base64encode(str).replace(/\+/g, "-").replace(/\//g, "_").replace(/=/g, "");
}

var S256Verifier = /*#__PURE__*/function () {
  function S256Verifier() {
    this.method = "S256";
  }

  var _proto = S256Verifier.prototype;

  _proto.verifyCodeChallenge = function verifyCodeChallenge(codeVerifier, codeChallenge) {
    var codeHash = crypto.createHash("sha256").update(codeVerifier).digest();
    return codeChallenge === base64urlencode(codeHash);
  };

  return S256Verifier;
}();

var AuthorizationRequest = function AuthorizationRequest(grantTypeId, client, redirectUri, user) {
  this.grantTypeId = grantTypeId;
  this.client = client;
  this.user = user;
  this.scopes = [];
  this.scopes = [];
  this.isAuthorizationApproved = false;
  this.redirectUri = redirectUri != null ? redirectUri : client.redirectUris[0];
  if (!this.redirectUri) throw OAuthException.logicException("Unknown redirect_uri");
};

var OAuthResponse = /*#__PURE__*/function () {
  function OAuthResponse(responseOptions) {
    if (responseOptions === void 0) {
      responseOptions = {
        headers: {}
      };
    }

    this.status = 200;
    this.body = {};
    this.headers = {};
    this.headers = _extends({}, responseOptions.headers);
  }

  var _proto = OAuthResponse.prototype;

  _proto.get = function get(field) {
    console.log({
      headers: this.headers,
      field: field
    });
    return "";
  };

  _proto.set = function set(fieldOrHeaders, value) {
    this.headers[fieldOrHeaders.toLowerCase()] = value;
  };

  return OAuthResponse;
}();

var RedirectResponse = /*#__PURE__*/function (_OAuthResponse) {
  _inheritsLoose(RedirectResponse, _OAuthResponse);

  function RedirectResponse(redirectUri, options) {
    var _this;

    _this = _OAuthResponse.call(this, options) || this;

    _this.set("Location", redirectUri);

    _this.status = 302;
    return _this;
  }

  return RedirectResponse;
}(OAuthResponse);

var DateInterval = /*#__PURE__*/function () {
  function DateInterval(interval) {
    this.interval = interval;
    this.ms = ms(interval);
  }

  var _proto = DateInterval.prototype;

  _proto.getEndDate = function getEndDate() {
    return new Date(this.getEndTimeMs());
  };

  _proto.getEndTimeMs = function getEndTimeMs() {
    return Date.now() + this.ms;
  };

  _proto.getEndTimeSeconds = function getEndTimeSeconds() {
    return Math.ceil(this.getEndTimeMs() / 1000);
  };

  _proto.getSeconds = function getSeconds() {
    return Math.ceil(this.ms / 1000);
  };

  DateInterval.getDateEnd = function getDateEnd(ms) {
    return new DateInterval(ms).getEndDate();
  };

  return DateInterval;
}();

function isClientConfidential(client) {
  return !!client.secret;
}

var BearerTokenResponse = /*#__PURE__*/function (_OAuthResponse) {
  _inheritsLoose(BearerTokenResponse, _OAuthResponse);

  function BearerTokenResponse(accessToken, options) {
    var _this;

    _this = _OAuthResponse.call(this, options) || this;
    _this.accessToken = accessToken;
    _this.status = HttpStatus.OK;

    _this.set("pragma", "no-cache");

    _this.set("cache-control", "no-store");

    _this.set("content-type", "application/json; charset=UTF-8");

    return _this;
  }

  return BearerTokenResponse;
}(OAuthResponse);

var arrayDiff = function arrayDiff(arr1, arr2) {
  return arr1.filter(function (x) {
    return !arr2.includes(x);
  });
};

function getSecondsUntil(date) {
  return roundToSeconds(date.getTime() - Date.now());
}
function roundToSeconds(ms) {
  if (ms instanceof Date) ms = ms.getTime();
  return Math.ceil(ms / 1000);
}

var AbstractGrant = /*#__PURE__*/function () {
  function AbstractGrant(authCodeRepository, clientRepository, tokenRepository, scopeRepository, userRepository, jwt) {
    this.authCodeRepository = authCodeRepository;
    this.clientRepository = clientRepository;
    this.tokenRepository = tokenRepository;
    this.scopeRepository = scopeRepository;
    this.userRepository = userRepository;
    this.jwt = jwt;
    this.options = {
      requiresPKCE: true
    };
    this.scopeDelimiterString = " ";
    this.supportedGrantTypes = ["client_credentials", "authorization_code", "refresh_token", "password", "implicit"];
  }

  var _proto = AbstractGrant.prototype;

  _proto.makeBearerTokenResponse = /*#__PURE__*/function () {
    var _makeBearerTokenResponse = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(client, accessToken, scopes, extraJwtFields) {
      var scope, encryptedAccessToken, encryptedRefreshToken, bearerTokenResponse;
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (scopes === void 0) {
                scopes = [];
              }

              if (extraJwtFields === void 0) {
                extraJwtFields = {};
              }

              scope = scopes.map(function (scope) {
                return scope.name;
              }).join(this.scopeDelimiterString);
              _context.next = 5;
              return this.encryptAccessToken(client, accessToken, scopes, extraJwtFields);

            case 5:
              encryptedAccessToken = _context.sent;
              encryptedRefreshToken = undefined;

              if (!accessToken.refreshToken) {
                _context.next = 11;
                break;
              }

              _context.next = 10;
              return this.encryptRefreshToken(client, accessToken, scopes);

            case 10:
              encryptedRefreshToken = _context.sent;

            case 11:
              bearerTokenResponse = new BearerTokenResponse(accessToken);
              bearerTokenResponse.body = {
                token_type: "Bearer",
                expires_in: getSecondsUntil(accessToken.accessTokenExpiresAt),
                access_token: encryptedAccessToken,
                refresh_token: encryptedRefreshToken,
                scope: scope
              };
              return _context.abrupt("return", bearerTokenResponse);

            case 14:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function makeBearerTokenResponse(_x, _x2, _x3, _x4) {
      return _makeBearerTokenResponse.apply(this, arguments);
    }

    return makeBearerTokenResponse;
  }();

  _proto.encryptRefreshToken = function encryptRefreshToken(client, refreshToken, scopes) {
    var _refreshToken$refresh, _refreshToken$refresh2, _refreshToken$user;

    var expiresAtMs = (_refreshToken$refresh = (_refreshToken$refresh2 = refreshToken.refreshTokenExpiresAt) == null ? void 0 : _refreshToken$refresh2.getTime()) != null ? _refreshToken$refresh : refreshToken.accessTokenExpiresAt.getTime();
    return this.encrypt({
      client_id: client.id,
      access_token_id: refreshToken.accessToken,
      refresh_token_id: refreshToken.refreshToken,
      scope: scopes.map(function (scope) {
        return scope.name;
      }).join(this.scopeDelimiterString),
      user_id: (_refreshToken$user = refreshToken.user) == null ? void 0 : _refreshToken$user.id,
      expire_time: Math.ceil(expiresAtMs / 1000)
    });
  };

  _proto.encryptAccessToken = function encryptAccessToken(client, accessToken, scopes, extraJwtFields) {
    var _accessToken$user;

    return this.encrypt(_extends({}, extraJwtFields, {
      cid: client.name,
      scope: scopes.map(function (scope) {
        return scope.name;
      }).join(this.scopeDelimiterString),
      iss: undefined,
      sub: (_accessToken$user = accessToken.user) == null ? void 0 : _accessToken$user.id,
      aud: undefined,
      exp: roundToSeconds(accessToken.accessTokenExpiresAt.getTime()),
      nbf: roundToSeconds(Date.now()),
      iat: roundToSeconds(Date.now()),
      jti: accessToken.accessToken
    }));
  };

  _proto.validateClient = /*#__PURE__*/function () {
    var _validateClient = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(request) {
      var _this$getClientCreden, clientId, clientSecret, grantType, client, userValidationSuccess;

      return runtime_1.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _this$getClientCreden = this.getClientCredentials(request), clientId = _this$getClientCreden[0], clientSecret = _this$getClientCreden[1];
              grantType = this.getGrantType(request);
              _context2.next = 4;
              return this.clientRepository.getByIdentifier(clientId);

            case 4:
              client = _context2.sent;

              if (!(isClientConfidential(client) && !clientSecret)) {
                _context2.next = 7;
                break;
              }

              throw OAuthException.invalidClient("Confidential clients require client_secret.");

            case 7:
              _context2.next = 9;
              return this.clientRepository.isClientValid(grantType, client, clientSecret);

            case 9:
              userValidationSuccess = _context2.sent;

              if (userValidationSuccess) {
                _context2.next = 12;
                break;
              }

              throw OAuthException.invalidClient();

            case 12:
              if (!(grantType === "client_credentials")) {
                _context2.next = 15;
                break;
              }

              if (!(!client.secret || client.secret !== clientSecret)) {
                _context2.next = 15;
                break;
              }

              throw OAuthException.invalidClient("Invalid client_credentials");

            case 15:
              return _context2.abrupt("return", client);

            case 16:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function validateClient(_x5) {
      return _validateClient.apply(this, arguments);
    }

    return validateClient;
  }();

  _proto.getClientCredentials = function getClientCredentials(request) {
    var _this$getBasicAuthCre = this.getBasicAuthCredentials(request),
        basicAuthUser = _this$getBasicAuthCre[0],
        basicAuthPass = _this$getBasicAuthCre[1];

    var clientId = this.getRequestParameter("client_id", request, basicAuthUser);

    if (!clientId) {
      throw OAuthException.invalidRequest("client_id");
    }

    var clientSecret = this.getRequestParameter("client_secret", request, basicAuthPass);
    if (Array.isArray(clientId) && clientId.length > 0) clientId = clientId[0];
    if (Array.isArray(clientSecret) && clientSecret.length > 0) clientSecret = clientSecret[0];
    return [clientId, clientSecret];
  };

  _proto.getBasicAuthCredentials = function getBasicAuthCredentials(request) {
    var _request$headers;

    if (!((_request$headers = request.headers) != null && _request$headers.hasOwnProperty("authorization"))) {
      return [undefined, undefined];
    }

    var header = request.headers["authorization"];

    if (!header || !header.startsWith("Basic ")) {
      return [undefined, undefined];
    }

    var decoded = base64decode(header.substr(6, header.length));

    if (!decoded.includes(":")) {
      return [undefined, undefined];
    }

    return decoded.split(":");
  };

  _proto.validateScopes = /*#__PURE__*/function () {
    var _validateScopes = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(scopes, redirectUri) {
      var validScopes, invalidScopes;
      return runtime_1.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              if (scopes === void 0) {
                scopes = [];
              }

              if (typeof scopes === "string") {
                scopes = scopes.split(this.scopeDelimiterString);
              }

              if (!(!scopes || scopes.length === 0 || scopes[0] === "")) {
                _context3.next = 4;
                break;
              }

              return _context3.abrupt("return", []);

            case 4:
              _context3.next = 6;
              return this.scopeRepository.getAllByIdentifiers(scopes);

            case 6:
              validScopes = _context3.sent;
              invalidScopes = arrayDiff(scopes, validScopes.map(function (scope) {
                return scope.name;
              }));

              if (!(invalidScopes.length > 0)) {
                _context3.next = 10;
                break;
              }

              throw OAuthException.invalidScope(invalidScopes.join(", "), redirectUri);

            case 10:
              return _context3.abrupt("return", validScopes);

            case 11:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    function validateScopes(_x6, _x7) {
      return _validateScopes.apply(this, arguments);
    }

    return validateScopes;
  }();

  _proto.issueAccessToken = /*#__PURE__*/function () {
    var _issueAccessToken = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(accessTokenTTL, client, user, scopes) {
      var accessToken;
      return runtime_1.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              if (scopes === void 0) {
                scopes = [];
              }

              _context4.next = 3;
              return this.tokenRepository.issueToken(client, scopes, user);

            case 3:
              accessToken = _context4.sent;
              accessToken.accessTokenExpiresAt = accessTokenTTL.getEndDate();
              _context4.next = 7;
              return this.tokenRepository.persist(accessToken);

            case 7:
              return _context4.abrupt("return", accessToken);

            case 8:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this);
    }));

    function issueAccessToken(_x8, _x9, _x10, _x11) {
      return _issueAccessToken.apply(this, arguments);
    }

    return issueAccessToken;
  }();

  _proto.issueRefreshToken = function issueRefreshToken(accessToken) {
    return this.tokenRepository.issueRefreshToken(accessToken);
  };

  _proto.getGrantType = function getGrantType(request) {
    var _this$getRequestParam;

    var result = (_this$getRequestParam = this.getRequestParameter("grant_type", request)) != null ? _this$getRequestParam : this.getQueryStringParameter("grant_type", request);

    if (!result || !this.supportedGrantTypes.includes(result)) {
      throw OAuthException.invalidRequest("grant_type");
    }

    if (this.identifier !== result) {
      throw OAuthException.invalidRequest("grant_type", "something went wrong");
    }

    return result;
  };

  _proto.getRequestParameter = function getRequestParameter(param, request, defaultValue) {
    var _request$body$param, _request$body;

    return (_request$body$param = (_request$body = request.body) == null ? void 0 : _request$body[param]) != null ? _request$body$param : defaultValue;
  };

  _proto.getQueryStringParameter = function getQueryStringParameter(param, request, defaultValue) {
    var _request$query$param, _request$query;

    return (_request$query$param = (_request$query = request.query) == null ? void 0 : _request$query[param]) != null ? _request$query$param : defaultValue;
  };

  _proto.encrypt = function encrypt(unencryptedData) {
    return this.jwt.sign(unencryptedData);
  };

  _proto.decrypt = /*#__PURE__*/function () {
    var _decrypt = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5(encryptedData) {
      return runtime_1.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return this.jwt.verify(encryptedData);

            case 2:
              return _context5.abrupt("return", _context5.sent);

            case 3:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, this);
    }));

    function decrypt(_x12) {
      return _decrypt.apply(this, arguments);
    }

    return decrypt;
  }();

  _proto.validateAuthorizationRequest = function validateAuthorizationRequest(request) {
    throw new Error("Grant does not support the request");
  };

  _proto.canRespondToAccessTokenRequest = function canRespondToAccessTokenRequest(request) {
    return this.getRequestParameter("grant_type", request) === this.identifier;
  };

  _proto.canRespondToAuthorizationRequest = function canRespondToAuthorizationRequest(request) {
    return false;
  };

  _proto.completeAuthorizationRequest = /*#__PURE__*/function () {
    var _completeAuthorizationRequest = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee6(authorizationRequest) {
      return runtime_1.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              throw new Error("Grant does not support the request");

            case 1:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6);
    }));

    function completeAuthorizationRequest(_x13) {
      return _completeAuthorizationRequest.apply(this, arguments);
    }

    return completeAuthorizationRequest;
  }();

  _proto.respondToAccessTokenRequest = /*#__PURE__*/function () {
    var _respondToAccessTokenRequest = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee7(req, res, tokenTTL) {
      return runtime_1.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              throw new Error("Grant does not support the request");

            case 1:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7);
    }));

    function respondToAccessTokenRequest(_x14, _x15, _x16) {
      return _respondToAccessTokenRequest.apply(this, arguments);
    }

    return respondToAccessTokenRequest;
  }();

  return AbstractGrant;
}();

var AbstractAuthorizedGrant = /*#__PURE__*/function (_AbstractGrant) {
  _inheritsLoose(AbstractAuthorizedGrant, _AbstractGrant);

  function AbstractAuthorizedGrant() {
    return _AbstractGrant.apply(this, arguments) || this;
  }

  var _proto = AbstractAuthorizedGrant.prototype;

  _proto.makeRedirectUrl = function makeRedirectUrl(uri, params, queryDelimiter) {
    if (queryDelimiter === void 0) {
      queryDelimiter = "?";
    }

    var split = uri.includes(queryDelimiter) ? "&" : queryDelimiter;
    return uri + split + querystring.stringify(params);
  };

  _proto.getRedirectUri = function getRedirectUri(request, client) {
    var redirectUri = this.getQueryStringParameter("redirect_uri", request);

    if (!redirectUri) {
      return;
    }

    if (Array.isArray(redirectUri) && redirectUri.length === 1) {
      redirectUri = redirectUri[0];
    }

    this.validateRedirectUri(redirectUri, client);
    return redirectUri;
  };

  _proto.validateRedirectUri = function validateRedirectUri(redirectUri, client) {
    if (typeof redirectUri !== "string" || redirectUri === "") {
      throw OAuthException.invalidRequest("redirect_uri");
    }

    var parsed = parse(redirectUri);

    if (!parsed.scheme) {
      throw OAuthException.invalidRequest("redirect_uri");
    }

    if (!!parsed.fragment) {
      throw OAuthException.invalidRequest("redirect_uri", "Redirection endpoint must not contain url fragment based on RFC6749, section 3.1.2");
    }

    if (!client.redirectUris.includes(redirectUri)) {
      throw OAuthException.invalidClient("Invalid redirect_uri");
    }

    return redirectUri;
  };

  return AbstractAuthorizedGrant;
}(AbstractGrant);

var REGEXP_CODE_CHALLENGE = /^[A-Za-z0-9-._~]{43,128}$/;
var REGEXP_CODE_VERIFIER = /^[A-Za-z0-9-._~]{43,128}$/;
var REGEX_ACCESS_TOKEN = /[A-Za-z0-9\-\._~\+\/]+=*/g;
var AuthCodeGrant = /*#__PURE__*/function (_AbstractAuthorizedGr) {
  _inheritsLoose(AuthCodeGrant, _AbstractAuthorizedGr);

  function AuthCodeGrant() {
    var _this;

    _this = _AbstractAuthorizedGr.apply(this, arguments) || this;
    _this.identifier = "authorization_code";
    _this.authCodeTTL = new DateInterval("15m");
    _this.codeChallengeVerifiers = {
      plain: new PlainVerifier(),
      S256: new S256Verifier()
    };
    return _this;
  }

  var _proto = AuthCodeGrant.prototype;

  _proto.respondToAccessTokenRequest = /*#__PURE__*/function () {
    var _respondToAccessTokenRequest = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(request, response, accessTokenTTL) {
      var _this$userRepository$, _this$userRepository;

      var client, encryptedAuthCode, decryptedCode, validatedPayload, userId, user, scopes, _validatedPayload$sco, finalizedScopes, authCode, codeVerifier, codeChallengeMethod, verifier, accessToken, extraJwtFields;

      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this.validateClient(request);

            case 2:
              client = _context.sent;
              encryptedAuthCode = this.getRequestParameter("code", request);

              if (encryptedAuthCode) {
                _context.next = 6;
                break;
              }

              throw OAuthException.invalidRequest("code");

            case 6:
              _context.next = 8;
              return this.decrypt(encryptedAuthCode);

            case 8:
              decryptedCode = _context.sent;
              _context.next = 11;
              return this.validateAuthorizationCode(decryptedCode, client, request);

            case 11:
              validatedPayload = _context.sent;
              userId = validatedPayload.user_id;

              if (!userId) {
                _context.next = 19;
                break;
              }

              _context.next = 16;
              return this.userRepository.getUserByCredentials(userId);

            case 16:
              _context.t0 = _context.sent;
              _context.next = 20;
              break;

            case 19:
              _context.t0 = undefined;

            case 20:
              user = _context.t0;
              scopes = [];
              _context.prev = 22;
              _context.t1 = this.scopeRepository;
              _context.next = 26;
              return this.validateScopes((_validatedPayload$sco = validatedPayload.scopes) != null ? _validatedPayload$sco : []);

            case 26:
              _context.t2 = _context.sent;
              _context.t3 = this.identifier;
              _context.t4 = client;
              _context.t5 = userId;
              _context.next = 32;
              return _context.t1.finalize.call(_context.t1, _context.t2, _context.t3, _context.t4, _context.t5);

            case 32:
              finalizedScopes = _context.sent;
              finalizedScopes.forEach(function (scope) {
                return scopes.push(scope);
              });
              _context.next = 39;
              break;

            case 36:
              _context.prev = 36;
              _context.t6 = _context["catch"](22);
              throw OAuthException.invalidRequest("code", "Cannot verify scopes");

            case 39:
              _context.next = 41;
              return this.authCodeRepository.getByIdentifier(validatedPayload.auth_code_id);

            case 41:
              authCode = _context.sent;

              if (!authCode.codeChallenge) {
                _context.next = 57;
                break;
              }

              if (validatedPayload.code_challenge) {
                _context.next = 45;
                break;
              }

              throw OAuthException.invalidRequest("code_challenge");

            case 45:
              if (!(authCode.codeChallenge !== validatedPayload.code_challenge)) {
                _context.next = 47;
                break;
              }

              throw OAuthException.invalidRequest("code_challenge", "Provided code challenge does not match auth code");

            case 47:
              codeVerifier = this.getRequestParameter("code_verifier", request);

              if (codeVerifier) {
                _context.next = 50;
                break;
              }

              throw OAuthException.invalidRequest("code_verifier");

            case 50:
              if (REGEXP_CODE_VERIFIER.test(codeVerifier)) {
                _context.next = 52;
                break;
              }

              throw OAuthException.invalidRequest("code_verifier", "Code verifier must follow the specifications of RFS-7636");

            case 52:
              codeChallengeMethod = validatedPayload.code_challenge_method;
              verifier = this.codeChallengeVerifiers.plain;

              if ((codeChallengeMethod == null ? void 0 : codeChallengeMethod.toLowerCase()) === "s256") {
                verifier = this.codeChallengeVerifiers.S256;
              }

              if (verifier.verifyCodeChallenge(codeVerifier, validatedPayload.code_challenge)) {
                _context.next = 57;
                break;
              }

              throw OAuthException.invalidGrant("Failed to verify code challenge.");

            case 57:
              _context.next = 59;
              return this.issueAccessToken(accessTokenTTL, client, user, scopes);

            case 59:
              accessToken = _context.sent;
              _context.next = 62;
              return this.issueRefreshToken(accessToken);

            case 62:
              accessToken = _context.sent;
              _context.next = 65;
              return this.authCodeRepository.revoke(validatedPayload.auth_code_id);

            case 65:
              if (!user) {
                _context.next = 71;
                break;
              }

              _context.next = 68;
              return (_this$userRepository$ = (_this$userRepository = this.userRepository).extraAccessTokenFields) == null ? void 0 : _this$userRepository$.call(_this$userRepository, user);

            case 68:
              _context.t7 = _context.sent;
              _context.next = 72;
              break;

            case 71:
              _context.t7 = undefined;

            case 72:
              extraJwtFields = _context.t7;
              _context.next = 75;
              return this.makeBearerTokenResponse(client, accessToken, scopes, extraJwtFields);

            case 75:
              return _context.abrupt("return", _context.sent);

            case 76:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this, [[22, 36]]);
    }));

    function respondToAccessTokenRequest(_x, _x2, _x3) {
      return _respondToAccessTokenRequest.apply(this, arguments);
    }

    return respondToAccessTokenRequest;
  }();

  _proto.canRespondToAuthorizationRequest = function canRespondToAuthorizationRequest(request) {
    var responseType = this.getQueryStringParameter("response_type", request);
    var hasClientId = !!this.getQueryStringParameter("client_id", request);
    return responseType === "code" && hasClientId;
  };

  _proto.validateAuthorizationRequest = /*#__PURE__*/function () {
    var _validateAuthorizationRequest = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(request) {
      var clientId, client, redirectUri, bodyScopes, scopes, stateParameter, authorizationRequest, codeChallenge, codeChallengeMethod;
      return runtime_1.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              clientId = this.getQueryStringParameter("client_id", request);

              if (!(typeof clientId !== "string")) {
                _context2.next = 3;
                break;
              }

              throw OAuthException.invalidRequest("client_id");

            case 3:
              _context2.next = 5;
              return this.clientRepository.getByIdentifier(clientId);

            case 5:
              client = _context2.sent;

              if (client) {
                _context2.next = 8;
                break;
              }

              throw OAuthException.invalidClient();

            case 8:
              redirectUri = this.getRedirectUri(request, client);
              bodyScopes = this.getQueryStringParameter("scope", request, []);
              _context2.next = 12;
              return this.validateScopes(bodyScopes);

            case 12:
              scopes = _context2.sent;
              stateParameter = this.getQueryStringParameter("state", request);
              authorizationRequest = new AuthorizationRequest(this.identifier, client, redirectUri);
              authorizationRequest.state = stateParameter;
              authorizationRequest.scopes = scopes;
              codeChallenge = this.getQueryStringParameter("code_challenge", request);

              if (!(this.options.requiresPKCE && !codeChallenge)) {
                _context2.next = 20;
                break;
              }

              throw OAuthException.invalidRequest("code_challenge", "The authorization server requires public clients to use PKCE RFC-7636");

            case 20:
              if (codeChallenge) {
                codeChallengeMethod = this.getQueryStringParameter("code_challenge_method", request, "plain");
                authorizationRequest.codeChallenge = codeChallenge;
                authorizationRequest.codeChallengeMethod = codeChallengeMethod;
              }

              return _context2.abrupt("return", authorizationRequest);

            case 22:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function validateAuthorizationRequest(_x4) {
      return _validateAuthorizationRequest.apply(this, arguments);
    }

    return validateAuthorizationRequest;
  }();

  _proto.completeAuthorizationRequest = /*#__PURE__*/function () {
    var _completeAuthorizationRequest = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(authorizationRequest) {
      var _authCode$user;

      var redirectUri, authCode, payload, jsonPayload, code, finalRedirectUri;
      return runtime_1.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              if (authorizationRequest.user) {
                _context3.next = 2;
                break;
              }

              throw OAuthException.logicException("A user should be set on the authorization request");

            case 2:
              redirectUri = authorizationRequest.redirectUri;

              if (redirectUri) {
                _context3.next = 5;
                break;
              }

              throw OAuthException.invalidRequest("redirect_uri");

            case 5:
              if (authorizationRequest.isAuthorizationApproved) {
                _context3.next = 7;
                break;
              }

              throw OAuthException.logicException("Authorization is not approved");

            case 7:
              _context3.next = 9;
              return this.issueAuthCode(this.authCodeTTL, authorizationRequest.client, authorizationRequest.user.id, authorizationRequest.redirectUri, authorizationRequest.codeChallenge, authorizationRequest.codeChallengeMethod, authorizationRequest.scopes);

            case 9:
              authCode = _context3.sent;
              payload = {
                client_id: authCode.client.id,
                redirect_uri: authCode.redirectUri,
                auth_code_id: authCode.code,
                scopes: authCode.scopes.map(function (scope) {
                  return scope.name;
                }),
                user_id: (_authCode$user = authCode.user) == null ? void 0 : _authCode$user.id,
                expire_time: this.authCodeTTL.getEndTimeSeconds(),
                code_challenge: authorizationRequest.codeChallenge,
                code_challenge_method: authorizationRequest.codeChallengeMethod
              };
              jsonPayload = JSON.stringify(payload);
              _context3.next = 14;
              return this.encrypt(jsonPayload);

            case 14:
              code = _context3.sent;
              finalRedirectUri = this.makeRedirectUrl(redirectUri, {
                code: code,
                state: authorizationRequest.state
              });
              return _context3.abrupt("return", new RedirectResponse(finalRedirectUri));

            case 17:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    function completeAuthorizationRequest(_x5) {
      return _completeAuthorizationRequest.apply(this, arguments);
    }

    return completeAuthorizationRequest;
  }();

  _proto.validateAuthorizationCode = /*#__PURE__*/function () {
    var _validateAuthorizationCode = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(payload, client, request) {
      var isCodeRevoked, redirectUri;
      return runtime_1.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              if (payload.auth_code_id) {
                _context4.next = 2;
                break;
              }

              throw OAuthException.invalidRequest("code", "Authorization code malformed");

            case 2:
              _context4.next = 4;
              return this.authCodeRepository.isRevoked(payload.auth_code_id);

            case 4:
              isCodeRevoked = _context4.sent;

              if (!(Date.now() / 1000 > payload.expire_time || isCodeRevoked)) {
                _context4.next = 7;
                break;
              }

              throw OAuthException.invalidRequest("code", "Authorization code is expired or revoked");

            case 7:
              if (!(payload.client_id !== client.id)) {
                _context4.next = 9;
                break;
              }

              throw OAuthException.invalidRequest("code", "Authorization code was not issued to this client");

            case 9:
              redirectUri = this.getRequestParameter("redirect_uri", request);

              if (!(!!payload.redirect_uri && !redirectUri)) {
                _context4.next = 12;
                break;
              }

              throw OAuthException.invalidRequest("redirect_uri");

            case 12:
              if (!(payload.redirect_uri !== redirectUri)) {
                _context4.next = 14;
                break;
              }

              throw OAuthException.invalidRequest("redirect_uri", "Invalid redirect URI");

            case 14:
              return _context4.abrupt("return", payload);

            case 15:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this);
    }));

    function validateAuthorizationCode(_x6, _x7, _x8) {
      return _validateAuthorizationCode.apply(this, arguments);
    }

    return validateAuthorizationCode;
  }();

  _proto.issueAuthCode = /*#__PURE__*/function () {
    var _issueAuthCode = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5(authCodeTTL, client, userIdentifier, redirectUri, codeChallenge, codeChallengeMethod, scopes) {
      var user, authCode;
      return runtime_1.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              if (scopes === void 0) {
                scopes = [];
              }

              if (!userIdentifier) {
                _context5.next = 7;
                break;
              }

              _context5.next = 4;
              return this.userRepository.getUserByCredentials(userIdentifier);

            case 4:
              _context5.t0 = _context5.sent;
              _context5.next = 8;
              break;

            case 7:
              _context5.t0 = undefined;

            case 8:
              user = _context5.t0;
              _context5.next = 11;
              return this.authCodeRepository.issueAuthCode(client, user, scopes);

            case 11:
              authCode = _context5.sent;
              authCode.expiresAt = authCodeTTL.getEndDate();
              authCode.redirectUri = redirectUri;
              authCode.codeChallenge = codeChallenge;
              authCode.codeChallengeMethod = codeChallengeMethod;
              authCode.scopes = [];
              scopes.forEach(function (scope) {
                return authCode.scopes.push(scope);
              });
              _context5.next = 20;
              return this.authCodeRepository.persist(authCode);

            case 20:
              return _context5.abrupt("return", authCode);

            case 21:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, this);
    }));

    function issueAuthCode(_x9, _x10, _x11, _x12, _x13, _x14, _x15) {
      return _issueAuthCode.apply(this, arguments);
    }

    return issueAuthCode;
  }();

  return AuthCodeGrant;
}(AbstractAuthorizedGrant);

var ClientCredentialsGrant = /*#__PURE__*/function (_AbstractGrant) {
  _inheritsLoose(ClientCredentialsGrant, _AbstractGrant);

  function ClientCredentialsGrant() {
    var _this;

    _this = _AbstractGrant.apply(this, arguments) || this;
    _this.identifier = "client_credentials";
    return _this;
  }

  var _proto = ClientCredentialsGrant.prototype;

  _proto.respondToAccessTokenRequest = /*#__PURE__*/function () {
    var _respondToAccessTokenRequest = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(request, response, accessTokenTTL) {
      var client, bodyScopes, validScopes, user, accessToken;
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this.validateClient(request);

            case 2:
              client = _context.sent;
              bodyScopes = this.getRequestParameter("scope", request, []);
              _context.next = 6;
              return this.validateScopes(bodyScopes);

            case 6:
              validScopes = _context.sent;
              user = undefined;
              _context.next = 10;
              return this.issueAccessToken(accessTokenTTL, client, user, validScopes);

            case 10:
              accessToken = _context.sent;
              _context.next = 13;
              return this.makeBearerTokenResponse(client, accessToken, validScopes);

            case 13:
              return _context.abrupt("return", _context.sent);

            case 14:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function respondToAccessTokenRequest(_x, _x2, _x3) {
      return _respondToAccessTokenRequest.apply(this, arguments);
    }

    return respondToAccessTokenRequest;
  }();

  return ClientCredentialsGrant;
}(AbstractGrant);

var ImplicitGrant = /*#__PURE__*/function (_AbstractAuthorizedGr) {
  _inheritsLoose(ImplicitGrant, _AbstractAuthorizedGr);

  function ImplicitGrant() {
    var _this;

    _this = _AbstractAuthorizedGr.apply(this, arguments) || this;
    _this.identifier = "implicit";
    _this.accessTokenTTL = new DateInterval("1h");
    return _this;
  }

  var _proto = ImplicitGrant.prototype;

  _proto.respondToAccessTokenRequest = function respondToAccessTokenRequest(req, res, tokenTTL) {
    throw OAuthException.logicException("The implicit grant can't respond to access token requests");
  };

  _proto.canRespondToAccessTokenRequest = function canRespondToAccessTokenRequest(request) {
    var clientId = this.getQueryStringParameter("client_id", request);
    return this.getQueryStringParameter("response_type", request) === "token" && !!clientId;
  };

  _proto.validateAuthorizationRequest = /*#__PURE__*/function () {
    var _validateAuthorizationRequest = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(request) {
      var clientId, client, redirectUri, scopes, state, authorizationRequest;
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              clientId = this.getQueryStringParameter("client_id", request);

              if (clientId) {
                _context.next = 3;
                break;
              }

              throw OAuthException.invalidRequest("client_id");

            case 3:
              _context.next = 5;
              return this.clientRepository.getByIdentifier(clientId);

            case 5:
              client = _context.sent;

              if (client) {
                _context.next = 8;
                break;
              }

              throw OAuthException.invalidClient();

            case 8:
              redirectUri = this.getRedirectUri(request, client);
              _context.next = 11;
              return this.validateScopes(this.getQueryStringParameter("scope", request, []), redirectUri);

            case 11:
              scopes = _context.sent;
              state = this.getQueryStringParameter("state", request);
              authorizationRequest = new AuthorizationRequest(this.identifier, client, redirectUri);
              authorizationRequest.state = state;
              authorizationRequest.scopes = scopes;
              return _context.abrupt("return", authorizationRequest);

            case 17:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function validateAuthorizationRequest(_x) {
      return _validateAuthorizationRequest.apply(this, arguments);
    }

    return validateAuthorizationRequest;
  }();

  _proto.completeAuthorizationRequest = /*#__PURE__*/function () {
    var _completeAuthorizationRequest = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(authorizationRequest) {
      var _authorizationRequest, _this$userRepository$, _this$userRepository;

      var finalRedirectUri, _authorizationRequest2, finalizedScopes, accessToken, extraFields, encryptedAccessToken;

      return runtime_1.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (!(!authorizationRequest.user || !((_authorizationRequest = authorizationRequest.user) != null && _authorizationRequest.id))) {
                _context2.next = 2;
                break;
              }

              throw OAuthException.logicException("A user must be set on the AuthorizationRequest");

            case 2:
              finalRedirectUri = authorizationRequest.redirectUri;

              if (!finalRedirectUri) {
                finalRedirectUri = (_authorizationRequest2 = authorizationRequest.client) == null ? void 0 : _authorizationRequest2.redirectUris[0];
              }

              if (finalRedirectUri) {
                _context2.next = 6;
                break;
              }

              throw OAuthException.invalidRequest("redirect_uri", "Neither the request nor the client contain a valid refresh token");

            case 6:
              if (authorizationRequest.isAuthorizationApproved) {
                _context2.next = 8;
                break;
              }

              throw OAuthException.accessDenied();

            case 8:
              _context2.next = 10;
              return this.scopeRepository.finalize(authorizationRequest.scopes, this.identifier, authorizationRequest.client, authorizationRequest.user.id);

            case 10:
              finalizedScopes = _context2.sent;
              _context2.next = 13;
              return this.issueAccessToken(this.accessTokenTTL, authorizationRequest.client, authorizationRequest.user, finalizedScopes);

            case 13:
              accessToken = _context2.sent;

              if (!authorizationRequest.user) {
                _context2.next = 20;
                break;
              }

              _context2.next = 17;
              return (_this$userRepository$ = (_this$userRepository = this.userRepository).extraAccessTokenFields) == null ? void 0 : _this$userRepository$.call(_this$userRepository, authorizationRequest.user);

            case 17:
              _context2.t0 = _context2.sent;
              _context2.next = 21;
              break;

            case 20:
              _context2.t0 = undefined;

            case 21:
              extraFields = _context2.t0;
              _context2.next = 24;
              return this.encryptAccessToken(authorizationRequest.client, accessToken, authorizationRequest.scopes, extraFields != null ? extraFields : {});

            case 24:
              encryptedAccessToken = _context2.sent;
              return _context2.abrupt("return", new RedirectResponse(this.makeRedirectUrl(finalRedirectUri, {
                access_token: encryptedAccessToken,
                token_type: "Bearer",
                expires_in: getSecondsUntil(accessToken.accessTokenExpiresAt),
                state: authorizationRequest.state
              })));

            case 26:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function completeAuthorizationRequest(_x2) {
      return _completeAuthorizationRequest.apply(this, arguments);
    }

    return completeAuthorizationRequest;
  }();

  return ImplicitGrant;
}(AbstractAuthorizedGrant);

var PasswordGrant = /*#__PURE__*/function (_AbstractGrant) {
  _inheritsLoose(PasswordGrant, _AbstractGrant);

  function PasswordGrant() {
    var _this;

    _this = _AbstractGrant.apply(this, arguments) || this;
    _this.identifier = "password";
    return _this;
  }

  var _proto = PasswordGrant.prototype;

  _proto.respondToAccessTokenRequest = /*#__PURE__*/function () {
    var _respondToAccessTokenRequest = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(request, response, accessTokenTTL) {
      var _this$userRepository$, _this$userRepository;

      var client, bodyScopes, user, finalizedScopes, accessToken, extraJwtFields;
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this.validateClient(request);

            case 2:
              client = _context.sent;
              bodyScopes = this.getRequestParameter("scope", request, []);
              _context.next = 6;
              return this.validateUser(request, client);

            case 6:
              user = _context.sent;
              _context.t0 = this.scopeRepository;
              _context.next = 10;
              return this.validateScopes(bodyScopes);

            case 10:
              _context.t1 = _context.sent;
              _context.t2 = this.identifier;
              _context.t3 = client;
              _context.t4 = user.id;
              _context.next = 16;
              return _context.t0.finalize.call(_context.t0, _context.t1, _context.t2, _context.t3, _context.t4);

            case 16:
              finalizedScopes = _context.sent;
              _context.next = 19;
              return this.issueAccessToken(accessTokenTTL, client, user, finalizedScopes);

            case 19:
              accessToken = _context.sent;
              _context.next = 22;
              return this.issueRefreshToken(accessToken);

            case 22:
              accessToken = _context.sent;
              _context.next = 25;
              return (_this$userRepository$ = (_this$userRepository = this.userRepository).extraAccessTokenFields) == null ? void 0 : _this$userRepository$.call(_this$userRepository, user);

            case 25:
              extraJwtFields = _context.sent;
              _context.next = 28;
              return this.makeBearerTokenResponse(client, accessToken, finalizedScopes, extraJwtFields);

            case 28:
              return _context.abrupt("return", _context.sent);

            case 29:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function respondToAccessTokenRequest(_x, _x2, _x3) {
      return _respondToAccessTokenRequest.apply(this, arguments);
    }

    return respondToAccessTokenRequest;
  }();

  _proto.validateUser = /*#__PURE__*/function () {
    var _validateUser = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(request, client) {
      var username, password, user;
      return runtime_1.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              username = this.getRequestParameter("username", request);

              if (username) {
                _context2.next = 3;
                break;
              }

              throw OAuthException.invalidRequest("username");

            case 3:
              password = this.getRequestParameter("password", request);

              if (password) {
                _context2.next = 6;
                break;
              }

              throw OAuthException.invalidRequest("password");

            case 6:
              _context2.next = 8;
              return this.userRepository.getUserByCredentials(username, password, this.identifier, client);

            case 8:
              user = _context2.sent;

              if (user) {
                _context2.next = 11;
                break;
              }

              throw OAuthException.invalidGrant();

            case 11:
              return _context2.abrupt("return", user);

            case 12:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function validateUser(_x4, _x5) {
      return _validateUser.apply(this, arguments);
    }

    return validateUser;
  }();

  return PasswordGrant;
}(AbstractGrant);

var RefreshTokenGrant = /*#__PURE__*/function (_AbstractGrant) {
  _inheritsLoose(RefreshTokenGrant, _AbstractGrant);

  function RefreshTokenGrant() {
    var _this;

    _this = _AbstractGrant.apply(this, arguments) || this;
    _this.identifier = "refresh_token";
    return _this;
  }

  var _proto = RefreshTokenGrant.prototype;

  _proto.respondToAccessTokenRequest = /*#__PURE__*/function () {
    var _respondToAccessTokenRequest = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(request, response, accessTokenTTL) {
      var _this$userRepository$, _this$userRepository;

      var client, oldToken, user, scopes, newToken, extraJwtFields;
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this.validateClient(request);

            case 2:
              client = _context.sent;
              _context.next = 5;
              return this.validateOldRefreshToken(request, client.id);

            case 5:
              oldToken = _context.sent;
              user = oldToken.user;
              _context.next = 9;
              return this.validateScopes(this.getRequestParameter("scope", request, oldToken.scopes.map(function (s) {
                return s.name;
              })));

            case 9:
              scopes = _context.sent;
              scopes.forEach(function (scope) {
                if (!oldToken.scopes.map(function (scope) {
                  return scope.name;
                }).includes(scope.name)) {
                  throw OAuthException.invalidScope(scope.name);
                }
              });
              _context.next = 13;
              return this.tokenRepository.revoke(oldToken);

            case 13:
              _context.next = 15;
              return this.issueAccessToken(accessTokenTTL, client, user, scopes);

            case 15:
              newToken = _context.sent;
              _context.next = 18;
              return this.issueRefreshToken(newToken);

            case 18:
              newToken = _context.sent;

              if (!user) {
                _context.next = 25;
                break;
              }

              _context.next = 22;
              return (_this$userRepository$ = (_this$userRepository = this.userRepository).extraAccessTokenFields) == null ? void 0 : _this$userRepository$.call(_this$userRepository, user);

            case 22:
              _context.t0 = _context.sent;
              _context.next = 26;
              break;

            case 25:
              _context.t0 = undefined;

            case 26:
              extraJwtFields = _context.t0;
              _context.next = 29;
              return this.makeBearerTokenResponse(client, newToken, scopes, extraJwtFields);

            case 29:
              return _context.abrupt("return", _context.sent);

            case 30:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function respondToAccessTokenRequest(_x, _x2, _x3) {
      return _respondToAccessTokenRequest.apply(this, arguments);
    }

    return respondToAccessTokenRequest;
  }();

  _proto.validateOldRefreshToken = /*#__PURE__*/function () {
    var _validateOldRefreshToken = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(request, clientId) {
      var _refreshTokenData, _refreshTokenData2, _refreshTokenData3;

      var encryptedRefreshToken, refreshTokenData, refreshToken;
      return runtime_1.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              encryptedRefreshToken = this.getRequestParameter("refresh_token", request);

              if (encryptedRefreshToken) {
                _context2.next = 3;
                break;
              }

              throw OAuthException.invalidRequest("refresh_token");

            case 3:
              _context2.prev = 3;
              _context2.next = 6;
              return this.decrypt(encryptedRefreshToken);

            case 6:
              refreshTokenData = _context2.sent;
              _context2.next = 14;
              break;

            case 9:
              _context2.prev = 9;
              _context2.t0 = _context2["catch"](3);

              if (!(_context2.t0.message === "invalid signature")) {
                _context2.next = 13;
                break;
              }

              throw OAuthException.invalidRequest("refresh_token", "Cannot verify the refresh token");

            case 13:
              throw OAuthException.invalidRequest("refresh_token", "Cannot decrypt the refresh token");

            case 14:
              if ((_refreshTokenData = refreshTokenData) != null && _refreshTokenData.refresh_token_id) {
                _context2.next = 16;
                break;
              }

              throw OAuthException.invalidRequest("refresh_token", "Token missing");

            case 16:
              if (!(((_refreshTokenData2 = refreshTokenData) == null ? void 0 : _refreshTokenData2.client_id) !== clientId)) {
                _context2.next = 18;
                break;
              }

              throw OAuthException.invalidRequest("refresh_token", "Token is not linked to client");

            case 18:
              if (!(Date.now() / 1000 > ((_refreshTokenData3 = refreshTokenData) == null ? void 0 : _refreshTokenData3.expire_time))) {
                _context2.next = 20;
                break;
              }

              throw OAuthException.invalidRequest("refresh_token", "Token has expired");

            case 20:
              _context2.next = 22;
              return this.tokenRepository.getByRefreshToken(refreshTokenData.refresh_token_id);

            case 22:
              refreshToken = _context2.sent;
              _context2.next = 25;
              return this.tokenRepository.isRefreshTokenRevoked(refreshToken);

            case 25:
              if (!_context2.sent) {
                _context2.next = 27;
                break;
              }

              throw OAuthException.invalidRequest("refresh_token", "Token has been revoked");

            case 27:
              return _context2.abrupt("return", refreshToken);

            case 28:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this, [[3, 9]]);
    }));

    function validateOldRefreshToken(_x4, _x5) {
      return _validateOldRefreshToken.apply(this, arguments);
    }

    return validateOldRefreshToken;
  }();

  return RefreshTokenGrant;
}(AbstractGrant);

var AuthorizationServer = /*#__PURE__*/function () {
  function AuthorizationServer(authCodeRepository, clientRepository, tokenRepository, scopeRepository, userRepository, jwt, options) {
    this.authCodeRepository = authCodeRepository;
    this.clientRepository = clientRepository;
    this.tokenRepository = tokenRepository;
    this.scopeRepository = scopeRepository;
    this.userRepository = userRepository;
    this.jwt = jwt;
    this.enabledGrantTypes = {};
    this.grantTypeAccessTokenTTL = {};
    this.availableGrants = {
      authorization_code: new AuthCodeGrant(this.authCodeRepository, this.clientRepository, this.tokenRepository, this.scopeRepository, this.userRepository, this.jwt),
      client_credentials: new ClientCredentialsGrant(this.authCodeRepository, this.clientRepository, this.tokenRepository, this.scopeRepository, this.userRepository, this.jwt),
      implicit: new ImplicitGrant(this.authCodeRepository, this.clientRepository, this.tokenRepository, this.scopeRepository, this.userRepository, this.jwt),
      password: new PasswordGrant(this.authCodeRepository, this.clientRepository, this.tokenRepository, this.scopeRepository, this.userRepository, this.jwt),
      refresh_token: new RefreshTokenGrant(this.authCodeRepository, this.clientRepository, this.tokenRepository, this.scopeRepository, this.userRepository, this.jwt)
    };
    this.setOptions(options);
  }

  var _proto = AuthorizationServer.prototype;

  _proto.setOptions = function setOptions(options) {
    if (options === void 0) {
      options = {};
    }

    this.options = _extends({
      requiresPKCE: true
    }, options);
  };

  _proto.enableGrantType = function enableGrantType(grantType, accessTokenTTL) {
    if (accessTokenTTL === void 0) {
      accessTokenTTL = new DateInterval("1h");
    }

    var grant = this.availableGrants[grantType];
    grant.options = this.options;
    this.enabledGrantTypes[grantType] = grant;
    this.grantTypeAccessTokenTTL[grantType] = accessTokenTTL;
  };

  _proto.respondToAccessTokenRequest = function respondToAccessTokenRequest(req, res) {
    for (var _i = 0, _Object$values = Object.values(this.enabledGrantTypes); _i < _Object$values.length; _i++) {
      var grantType = _Object$values[_i];

      if (!grantType.canRespondToAccessTokenRequest(req)) {
        continue;
      }

      var accessTokenTTL = this.grantTypeAccessTokenTTL[grantType.identifier];
      return grantType.respondToAccessTokenRequest(req, res, accessTokenTTL);
    }

    throw OAuthException.unsupportedGrantType();
  };

  _proto.validateAuthorizationRequest = function validateAuthorizationRequest(req) {
    for (var _i2 = 0, _Object$values2 = Object.values(this.enabledGrantTypes); _i2 < _Object$values2.length; _i2++) {
      var grant = _Object$values2[_i2];

      if (grant.canRespondToAuthorizationRequest(req)) {
        return grant.validateAuthorizationRequest(req);
      }
    }

    throw OAuthException.unsupportedGrantType();
  };

  _proto.completeAuthorizationRequest = /*#__PURE__*/function () {
    var _completeAuthorizationRequest = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(authorizationRequest) {
      var grant;
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              grant = this.enabledGrantTypes[authorizationRequest.grantTypeId];
              _context.next = 3;
              return grant.completeAuthorizationRequest(authorizationRequest);

            case 3:
              return _context.abrupt("return", _context.sent);

            case 4:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function completeAuthorizationRequest(_x) {
      return _completeAuthorizationRequest.apply(this, arguments);
    }

    return completeAuthorizationRequest;
  }();

  _proto.getGrant = function getGrant(grantType) {
    return this.availableGrants[grantType];
  };

  return AuthorizationServer;
}();

var OAuthRequest = /*#__PURE__*/function () {
  function OAuthRequest(options) {
    if (options === void 0) {
      options = {};
    }

    this.headers = {};
    this.headers = _extends({}, options.headers);
    this.query = _extends({}, options.query);
    this.body = _extends({}, options.body);
  }

  var _proto = OAuthRequest.prototype;

  _proto.set = function set(fieldOrHeaders, value) {
    this.headers[fieldOrHeaders.toLowerCase()] = value;
  };

  return OAuthRequest;
}();

var JwtService = /*#__PURE__*/function () {
  function JwtService(secretOrPrivateKey) {
    this.secretOrPrivateKey = secretOrPrivateKey;
  }

  var _proto = JwtService.prototype;

  _proto.verify = function verify(token, options) {
    var _this = this;

    if (options === void 0) {
      options = {};
    }

    return new Promise(function (resolve, reject) {
      jwt.verify(token, _this.secretOrPrivateKey, options, function (err, decoded) {
        if (decoded) resolve(decoded);else reject(err);
      });
    });
  };

  _proto.decode = function decode(encryptedData) {
    return jwt.decode(encryptedData);
  };

  _proto.sign = function sign(payload) {
    var _this2 = this;

    return new Promise(function (resolve, reject) {
      jwt.sign(payload, _this2.secretOrPrivateKey, function (err, encoded) {
        if (encoded) resolve(encoded);else reject(err);
      });
    });
  };

  return JwtService;
}();

export { AbstractAuthorizedGrant, AbstractGrant, AuthCodeGrant, AuthorizationRequest, AuthorizationServer, BearerTokenResponse, ClientCredentialsGrant, DateInterval, ErrorType, HttpStatus, ImplicitGrant, JwtService, OAuthException, OAuthRequest, OAuthResponse, PasswordGrant, PlainVerifier, REGEXP_CODE_CHALLENGE, REGEXP_CODE_VERIFIER, REGEX_ACCESS_TOKEN, RedirectResponse, RefreshTokenGrant, S256Verifier, arrayDiff, base64decode, base64encode, base64urlencode, getSecondsUntil, isClientConfidential, roundToSeconds };
//# sourceMappingURL=oauth2-server.esm.js.map
