export declare const HttpStatus: {
    NOT_ACCEPTABLE: number;
    BAD_REQUEST: number;
    UNAUTHORIZED: number;
    INTERNAL_SERVER_ERROR: number;
    OK: number;
};
export declare enum ErrorType {
    InvalidRequest = "invalid_request",
    InvalidClient = "invalid_client",
    InvalidGrant = "invalid_grant",
    InvalidScope = "invalid_scope",
    UnauthorizedClient = "unauthorized_client",
    UnsupportedGrantType = "unsupported_grant_type",
    AccessDenied = "access_denied"
}
export declare class OAuthException extends Error {
    readonly error: string;
    readonly errorType: ErrorType;
    readonly errorDescription?: string | undefined;
    readonly errorUri?: string | undefined;
    readonly status: number;
    constructor(error: string, errorType: ErrorType, errorDescription?: string | undefined, errorUri?: string | undefined, status?: number);
    static invalidRequest(parameter: string, errorDescription?: string): OAuthException;
    static invalidClient(errorDescription?: string): OAuthException;
    static invalidGrant(errorDescription?: string): OAuthException;
    static invalidScope(scope?: string, redirectUri?: string): OAuthException;
    static unauthorizedClient(): OAuthException;
    static unsupportedGrantType(): OAuthException;
    static logicException(message: string): OAuthException;
    static accessDenied(errorDescription?: string): OAuthException;
}
