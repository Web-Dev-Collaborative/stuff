/// <reference types="node" />
import { Secret, SignOptions, VerifyOptions } from "jsonwebtoken";
export interface JwtInterface {
    verify(token: string, options?: VerifyOptions): Promise<Record<string, unknown>>;
    decode(encryptedData: string): null | {
        [key: string]: any;
    } | string;
    sign(payload: string | Buffer | Record<string, unknown>, options?: SignOptions): Promise<string>;
}
export declare class JwtService implements JwtInterface {
    private readonly secretOrPrivateKey;
    constructor(secretOrPrivateKey: Secret);
    verify(token: string, options?: VerifyOptions): Promise<Record<string, unknown>>;
    decode(encryptedData: string): null | {
        [key: string]: any;
    } | string;
    sign(payload: string | Buffer | Record<string, unknown>): Promise<string>;
}
