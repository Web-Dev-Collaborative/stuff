/// <reference types="node" />
import { BaseService } from '@gitbeaker/requester-utils';
export declare type True = true;
export declare type False = false;
export interface PaginationInformation {
    total: number;
    next: number | null;
    current: number;
    previous: number | null;
    perPage: number;
    totalPages: number;
}
export interface Sudo {
    sudo?: string | number;
}
export interface IsForm {
    isForm?: boolean;
}
export interface ShowExpanded {
    showExpanded?: boolean;
}
export declare type BaseRequestOptions = Sudo & Record<string, any>;
export interface PaginatedRequestOptions extends BaseRequestOptions {
    pagination?: 'keyset' | 'offset';
    perPage?: number;
}
export interface OffsetPaginatedRequestOptions extends PaginatedRequestOptions {
    pagination: 'offset';
    page?: number;
    maxPages?: number;
}
export interface ExpandedResponse<T = Record<string, unknown>> {
    data: T;
    headers: Record<string, unknown>;
    status: number;
}
export interface PaginationResponse<T = Record<string, unknown>[]> {
    data: T;
    paginationInfo: PaginationInformation;
}
export declare function get<T = Record<string, unknown>>(service: BaseService, endpoint: string, options?: BaseRequestOptions): Promise<T | T[]>;
export declare function get<T = Record<string, unknown>>(service: BaseService, endpoint: string, options?: PaginatedRequestOptions): Promise<ExpandedResponse<T> | PaginationResponse<T>>;
export declare function get<T = Record<string, unknown>>(service: BaseService, endpoint: string, options?: OffsetPaginatedRequestOptions & {
    showExpanded: true;
}): Promise<ExpandedResponse<T> | PaginationResponse<T>>;
declare function post<T = Record<string, unknown>>(service: BaseService, endpoint: string, options?: IsForm & BaseRequestOptions): Promise<T>;
declare function post<T = Record<string, unknown>>(service: BaseService, endpoint: string, options?: IsForm & BaseRequestOptions & {
    showExpanded: true;
}): Promise<ExpandedResponse<T>>;
declare function put<T = Record<string, unknown>>(service: BaseService, endpoint: string, options?: BaseRequestOptions): Promise<T>;
declare function put<T = Record<string, unknown>>(service: BaseService, endpoint: string, { showExpanded }: BaseRequestOptions & {
    showExpanded: true;
}): Promise<ExpandedResponse<T>>;
declare function del<T = Record<string, unknown>>(service: BaseService, endpoint: string, options?: BaseRequestOptions): Promise<T>;
declare function del<T = Record<string, unknown>>(service: BaseService, endpoint: string, { showExpanded }: BaseRequestOptions & {
    showExpanded: true;
}): Promise<ExpandedResponse<T>>;
declare function stream(service: BaseService, endpoint: string, options?: BaseRequestOptions): NodeJS.ReadableStream;
export declare const RequestHelper: {
    post: typeof post;
    put: typeof put;
    get: typeof get;
    del: typeof del;
    stream: typeof stream;
};
export {};
