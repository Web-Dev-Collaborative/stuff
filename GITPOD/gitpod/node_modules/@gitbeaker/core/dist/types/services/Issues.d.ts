import { BaseService } from '@gitbeaker/requester-utils';
import { BaseRequestOptions, PaginatedRequestOptions, Sudo } from '../infrastructure';
declare type ProjectOrGroup = {
    projectId?: string | number;
} | {
    groupId?: string | number;
};
export declare class Issues extends BaseService {
    addSpentTime(projectId: string | number, issueIid: number, duration: string, options?: Sudo): Promise<Record<string, unknown>>;
    addTimeEstimate(projectId: string | number, issueIid: number, duration: string, options?: Sudo): Promise<Record<string, unknown>>;
    all({ projectId, groupId, ...options }?: ProjectOrGroup & PaginatedRequestOptions): Promise<Record<string, unknown> | Record<string, unknown>[]>;
    create(projectId: string | number, options?: BaseRequestOptions): Promise<Record<string, unknown>>;
    closedBy(projectId: string | number, issueIid: number, options?: BaseRequestOptions): Promise<Record<string, unknown> | Record<string, unknown>[]>;
    edit(projectId: string | number, issueIid: number, options?: BaseRequestOptions): Promise<Record<string, unknown>>;
    link(projectId: string | number, issueIid: number, targetProjectId: string | number, targetIssueIid: number, options?: BaseRequestOptions): Promise<Record<string, unknown>>;
    links(projectId: string | number, issueIid: number): Promise<Record<string, unknown> | Record<string, unknown>[]>;
    participants(projectId: string | number, issueIid: number, options?: Sudo): Promise<Record<string, unknown> | Record<string, unknown>[]>;
    relatedMergeRequests(projectId: string | number, issueIid: number, options?: BaseRequestOptions): Promise<Record<string, unknown> | Record<string, unknown>[]>;
    removeLink(projectId: string | number, issueIid: number, issueLinkId: string | number, options?: BaseRequestOptions): Promise<Record<string, unknown>>;
    remove(projectId: string | number, issueIid: number, options?: Sudo): Promise<Record<string, unknown>>;
    resetSpentTime(projectId: string | number, issueIid: number, options?: BaseRequestOptions): Promise<Record<string, unknown>>;
    resetTimeEstimate(projectId: string | number, issueIid: number, options?: Sudo): Promise<Record<string, unknown>>;
    show(projectId: string | number, issueIid: number, options?: Sudo): Promise<Record<string, unknown> | Record<string, unknown>[]>;
    subscribe(projectId: string | number, issueIid: number, options?: Sudo): Promise<Record<string, unknown>>;
    timeStats(projectId: string | number, issueIid: number, options?: Sudo): Promise<Record<string, unknown> | Record<string, unknown>[]>;
    unsubscribe(projectId: string | number, issueIid: number, options?: Sudo): Promise<Record<string, unknown>>;
}
export {};
