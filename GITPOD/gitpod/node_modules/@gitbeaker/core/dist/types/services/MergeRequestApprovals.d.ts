import { BaseService } from '@gitbeaker/requester-utils';
import { BaseRequestOptions, Sudo } from '../infrastructure';
export declare type ApprovalRulesRequestOptions = {
    userIds?: number[];
    groupIds?: number[];
    protectedBranchIds?: number[];
};
export declare class MergeRequestApprovals extends BaseService {
    addApprovalRule(projectId: string | number, name: string, approvalsRequired: number, { mergerequestIid, ...options }: {
        mergerequestIid?: number;
    } & ApprovalRulesRequestOptions & BaseRequestOptions): Promise<Record<string, unknown>>;
    approvalRules(projectId: string | number, { mergerequestIid, ...options }?: {
        mergerequestIid?: number;
    } & BaseRequestOptions): Promise<Record<string, unknown> | Record<string, unknown>[]>;
    approvals(projectId: string | number, { mergerequestIid, ...options }?: {
        mergerequestIid?: number;
    } & BaseRequestOptions): Promise<Record<string, unknown> | Record<string, unknown>[]>;
    approvalState(projectId: string | number, mergerequestIid: number, options?: {
        sha?: string;
    } & BaseRequestOptions): Promise<Record<string, unknown> | Record<string, unknown>[]>;
    approve(projectId: string | number, mergerequestIid: number, options?: {
        sha?: string;
    } & BaseRequestOptions): Promise<Record<string, unknown>>;
    approvers(projectId: string | number, approverIds: number[], approverGroupIds: (string | number)[], { mergerequestIid, ...options }?: {
        mergerequestIid?: number;
    } & BaseRequestOptions): Promise<Record<string, unknown>>;
    editApprovalRule(projectId: string | number, approvalRuleId: number, name: string, approvalsRequired: number, { mergerequestIid, ...options }?: {
        mergerequestIid?: number;
    } & ApprovalRulesRequestOptions & BaseRequestOptions): Promise<Record<string, unknown>>;
    editApprovals(projectId: string | number, { mergerequestIid, ...options }?: {
        mergerequestIid?: number;
    } & BaseRequestOptions): Promise<Record<string, unknown>>;
    removeApprovalRule(projectId: string | number, approvalRuleId: number, { mergerequestIid, ...options }?: {
        mergerequestIid?: number;
    } & BaseRequestOptions): Promise<Record<string, unknown>>;
    unapprove(projectId: string | number, mergerequestIid: number, options?: Sudo): Promise<Record<string, unknown>>;
}
