import { BaseService } from '@gitbeaker/requester-utils';
import { BaseRequestOptions, PaginatedRequestOptions, Sudo } from '../infrastructure';
import { EventOptions } from './Events';
export interface UserSchemaDefault {
    id: number;
    name: string;
    username: string;
    state: string;
    avatar_url: string;
    web_url: string;
}
export interface UserSchemaCamelized {
    id: number;
    name: string;
    username: string;
    state: string;
    avatarUrl: string;
    webUrl: string;
}
export declare type UserSchema = UserSchemaDefault | UserSchemaCamelized;
export interface UserDetailSchemaDefault extends UserSchemaDefault {
    created_at: Date;
    bio?: string;
    location?: string;
    public_email: string;
    skype: string;
    linkedin: string;
    twitter: string;
    website_url?: string;
    organization?: string;
}
export interface UserDetailSchemaCamelized extends UserSchemaCamelized {
    createdAt: Date;
    bio?: string;
    location?: string;
    publicEmail: string;
    skype: string;
    linkedin: string;
    twitter: string;
    websiteUrl?: string;
    organization?: string;
}
export declare type UserDetailSchema = UserDetailSchemaDefault | UserSchemaCamelized;
export declare class Users extends BaseService {
    all(options?: PaginatedRequestOptions): Promise<Record<string, unknown> | Record<string, unknown>[]>;
    activities(options?: Sudo): Promise<Record<string, unknown> | Record<string, unknown>[]>;
    projects(userId: number, options?: Sudo): Promise<Record<string, unknown> | Record<string, unknown>[]>;
    block(userId: number, options?: Sudo): Promise<Record<string, unknown>>;
    create(options?: BaseRequestOptions): Promise<Record<string, unknown>>;
    current(options?: Sudo): Promise<Record<string, unknown> | Record<string, unknown>[]>;
    edit(userId: number, options?: BaseRequestOptions): Promise<Record<string, unknown>>;
    events(userId: number, options?: BaseRequestOptions & EventOptions): Promise<Record<string, unknown> | Record<string, unknown>[]>;
    search(emailOrUsername: string, options?: Sudo): Promise<Record<string, unknown> | Record<string, unknown>[]>;
    show(userId: number, options?: BaseRequestOptions): Promise<Record<string, unknown> | Record<string, unknown>[]>;
    remove(userId: number, options?: Sudo): Promise<Record<string, unknown>>;
    unblock(userId: number, options?: Sudo): Promise<Record<string, unknown>>;
}
