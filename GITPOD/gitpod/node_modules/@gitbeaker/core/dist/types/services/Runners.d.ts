import { BaseService } from '@gitbeaker/requester-utils';
import { BaseRequestOptions, PaginatedRequestOptions, Sudo } from '../infrastructure';
export interface RunnerSchemaDefault {
    id: number;
    description: string;
    ip_address: string;
    active: boolean;
    is_shared: boolean;
    name: string;
    online: boolean;
    status: string;
}
export interface RunnerSchemaCamelized {
    id: number;
    description: string;
    ipAddress: string;
    active: boolean;
    isShared: boolean;
    name: string;
    online: boolean;
    status: string;
}
export declare type RunnerSchema = RunnerSchemaDefault | RunnerSchemaCamelized;
export declare class Runners extends BaseService {
    all({ projectId, ...options }?: {
        projectId?: string | number;
    } & PaginatedRequestOptions): Promise<Record<string, unknown> | Record<string, unknown>[]>;
    allOwned(options?: BaseRequestOptions): Promise<Record<string, unknown> | Record<string, unknown>[]>;
    edit(runnerId: number, options?: BaseRequestOptions): Promise<Record<string, unknown>>;
    enable(projectId: string | number, runnerId: number, options?: Sudo): Promise<Record<string, unknown>>;
    disable(projectId: string | number, runnerId: number, options?: Sudo): Promise<Record<string, unknown>>;
    jobs(runnerId: number, options?: Sudo): Promise<Record<string, unknown> | Record<string, unknown>[]>;
    remove(runnerId: number, options?: Sudo): Promise<Record<string, unknown>>;
    show(runnerId: number, options?: Sudo): Promise<Record<string, unknown> | Record<string, unknown>[]>;
}
