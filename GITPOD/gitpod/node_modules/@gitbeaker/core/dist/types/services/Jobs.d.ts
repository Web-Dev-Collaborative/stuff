/// <reference types="node" />
import { BaseService } from '@gitbeaker/requester-utils';
import { BaseRequestOptions, PaginatedRequestOptions, Sudo } from '../infrastructure';
import { CommitSchemaDefault, CommitSchemaCamelized } from './Commits';
import { PipelineSchemaDefault, PipelineSchemaCamelized } from './Pipelines';
import { RunnerSchemaDefault, RunnerSchemaCamelized } from './Runners';
import { UserSchemaDefault, UserSchemaCamelized } from './Users';
export declare type JobScope = 'created' | 'pending' | 'running' | 'failed' | 'success' | 'canceled' | 'skipped' | 'manual';
export interface ArtifactSchemaDefault {
    file_type: string;
    size: number;
    filename: string;
    file_format?: string;
}
export interface ArtifactSchemaCamelized {
    fileType: string;
    size: number;
    filename: string;
    fileFormat?: string;
}
export declare type ArtifactSchema = ArtifactSchemaDefault | ArtifactSchemaCamelized;
export interface JobSchemaDefault {
    id: number;
    status: string;
    stage: string;
    name: string;
    ref: string;
    tag: boolean;
    coverage?: string;
    allow_failure: boolean;
    created_at: Date;
    started_at?: Date;
    finished_at?: Date;
    duration?: number;
    user: UserSchemaDefault;
    commit: CommitSchemaDefault;
    pipeline: PipelineSchemaDefault;
    web_url: string;
    artifacts: ArtifactSchemaDefault[];
    runner: RunnerSchemaDefault;
    artifacts_expire_at?: Date;
}
export interface JobSchemaCamelized {
    id: number;
    status: string;
    stage: string;
    name: string;
    ref: string;
    tag: boolean;
    coverage?: string;
    allowFailure: boolean;
    createdAt: Date;
    startedAt?: Date;
    finishedAt?: Date;
    duration?: number;
    user: UserSchemaCamelized;
    commit: CommitSchemaCamelized;
    pipeline: PipelineSchemaCamelized;
    webUrl: string;
    artifacts: ArtifactSchemaCamelized[];
    runner: RunnerSchemaCamelized;
    artifactsExpireAt?: Date;
}
export declare type JobSchema = JobSchemaDefault | JobSchemaCamelized;
export declare class Jobs extends BaseService {
    all(projectId: string | number, options?: PaginatedRequestOptions): Promise<Record<string, unknown> | Record<string, unknown>[]>;
    cancel(projectId: string | number, jobId: number, options?: Sudo): Promise<Record<string, unknown>>;
    downloadSingleArtifactFile(projectId: string | number, jobId: number, artifactPath: string, { stream, ...options }?: {
        stream?: boolean;
    } & BaseRequestOptions): Promise<Record<string, unknown> | Record<string, unknown>[]> | NodeJS.ReadableStream;
    downloadSingleArtifactFileFromRef(projectId: string | number, ref: string, artifactPath: string, jobName: string, { stream, ...options }?: {
        stream?: boolean;
    } & BaseRequestOptions): Promise<Record<string, unknown> | Record<string, unknown>[]> | NodeJS.ReadableStream;
    downloadLatestArtifactFile(projectId: string | number, ref: string, jobName: string, { stream, ...options }?: {
        stream?: boolean;
    } & BaseRequestOptions): Promise<Record<string, unknown> | Record<string, unknown>[]> | NodeJS.ReadableStream;
    downloadTraceFile(projectId: string | number, jobId: number, options?: Sudo): Promise<Record<string, unknown> | Record<string, unknown>[]>;
    erase(projectId: string | number, jobId: number, options?: Sudo): Promise<Record<string, unknown>>;
    eraseArtifacts(projectId: string | number, jobId: number, options?: Sudo): Promise<Record<string, unknown>>;
    keepArtifacts(projectId: string | number, jobId: number, options?: Sudo): Promise<Record<string, unknown>>;
    play(projectId: string | number, jobId: number, options?: Sudo): Promise<Record<string, unknown>>;
    retry(projectId: string | number, jobId: number, options?: Sudo): Promise<Record<string, unknown>>;
    show(projectId: string | number, jobId: number, options?: Sudo): Promise<Record<string, unknown> | Record<string, unknown>[]>;
    showPipelineJobs(projectId: string | number, pipelineId: number, options?: {
        scope?: JobScope;
    } & Sudo): Promise<Record<string, unknown> | Record<string, unknown>[]>;
}
