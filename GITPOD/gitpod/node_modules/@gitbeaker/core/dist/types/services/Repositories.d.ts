import { BaseService } from '@gitbeaker/requester-utils';
import { Sudo, BaseRequestOptions } from '../infrastructure';
declare type ArchiveType = 'tar.gz' | 'tar.bz2' | 'tbz' | 'tbz2' | 'tb2' | 'bz2' | 'tar' | 'zip';
export declare class Repositories extends BaseService {
    compare(projectId: string | number, from: string, to: string, options?: Sudo): Promise<Record<string, unknown> | Record<string, unknown>[]>;
    contributors(projectId: string | number, options?: Sudo): Promise<Record<string, unknown> | Record<string, unknown>[]>;
    mergeBase(projectId: string | number, refs: string[], options?: Sudo): Promise<Record<string, unknown> | Record<string, unknown>[]>;
    showArchive(projectId: string | number, { fileType, ...options }?: {
        fileType?: ArchiveType;
    } & Sudo): Promise<Record<string, unknown> | Record<string, unknown>[]>;
    showBlob(projectId: string | number, sha: string, options?: Sudo): Promise<Record<string, unknown> | Record<string, unknown>[]>;
    showBlobRaw(projectId: string | number, sha: string, options?: Sudo): Promise<Record<string, unknown> | Record<string, unknown>[]>;
    tree(projectId: string | number, options?: BaseRequestOptions): Promise<Record<string, unknown> | Record<string, unknown>[]>;
}
export {};
