import { BaseService } from '@gitbeaker/requester-utils';
import { BaseRequestOptions, PaginatedRequestOptions, Sudo } from '../infrastructure';
export interface AcceptMergeRequestOptions {
    mergeCommitMessage?: string;
    squashCommitMessage?: string;
    squash?: boolean;
    shouldRemoveSourceBranch?: boolean;
    mergeWhenPipelineSucceeds?: boolean;
    sha?: string;
}
export interface ShowMergeRequestOptions {
    renderHtml?: boolean;
    includeDivergedCommitsCount?: true;
    includeRebaseInProgress?: boolean;
}
export interface CreateMergeRequestOptions {
    assigneeId?: number;
    description?: string;
    targetProjectId?: number;
    labels?: string | Array<string>;
    milestoneId?: number;
    removeSourceBranch?: boolean;
    allowCollaboration?: boolean;
    allowMaintainerToPush?: boolean;
    squash?: boolean;
}
export interface UpdateMergeRequestOptions {
    targetBranch?: number;
    title?: string;
    assigneeId?: number;
    milestoneId?: number;
    labels?: string | Array<string>;
    description?: string;
    stateEvent?: string;
    removeSourceBranch?: boolean;
    squash?: boolean;
    discussionLocked?: boolean;
    allowCollaboration?: boolean;
    allowMaintainerToPush?: boolean;
}
export interface AllMergeRequestsOptions {
    state?: 'opened' | 'closed' | 'locked' | 'merged';
    orderBy?: 'created_at' | 'updated_at';
    sort?: 'asc' | 'desc';
    milestone?: 'None' | string;
    view?: string;
    labels?: string | Array<string>;
    withLabelsDetails?: boolean;
    createdAfter?: string;
    createdBefore?: string;
    updatedBefore?: string;
    updatedAfter?: string;
    scope?: 'created_by_me' | 'assigned_to_me' | 'all';
    authorId?: number;
    asigneeId?: number;
    approverIds?: Array<number>;
    approvedByIds?: Array<number>;
    myReactionEmoji?: string;
    sourceBranch?: string;
    targetBranch?: string;
    in?: string;
    wip?: string;
}
export declare class MergeRequests extends BaseService {
    accept(projectId: string | number, mergerequestIid: number, options?: AcceptMergeRequestOptions & BaseRequestOptions): Promise<Record<string, unknown>>;
    addSpentTime(projectId: string | number, mergerequestIid: number, duration: string, options?: Sudo): Promise<Record<string, unknown>>;
    addTimeEstimate(projectId: string | number, mergerequestIid: number, duration: string, options?: Sudo): Promise<Record<string, unknown>>;
    all({ projectId, groupId, ...options }?: ({
        projectId?: string | number;
    } | {
        groupId?: string | number;
    }) & AllMergeRequestsOptions & PaginatedRequestOptions): Promise<Record<string, unknown> | Record<string, unknown>[]>;
    cancelOnPipelineSucess(projectId: string | number, mergerequestIid: number, options?: Sudo): Promise<Record<string, unknown>>;
    changes(projectId: string | number, mergerequestIid: number, options?: Sudo): Promise<Record<string, unknown> | Record<string, unknown>[]>;
    closesIssues(projectId: string | number, mergerequestIid: number, options?: Sudo): Promise<Record<string, unknown> | Record<string, unknown>[]>;
    commits(projectId: string | number, mergerequestIid: number, options?: Sudo): Promise<Record<string, unknown> | Record<string, unknown>[]>;
    create(projectId: string | number, sourceBranch: string, targetBranch: string, title: string, options?: CreateMergeRequestOptions & BaseRequestOptions): Promise<Record<string, unknown>>;
    edit(projectId: string | number, mergerequestIid: number, options?: UpdateMergeRequestOptions & BaseRequestOptions): Promise<Record<string, unknown>>;
    participants(projectId: string | number, mergerequestIid: number, options?: Sudo): Promise<Record<string, unknown> | Record<string, unknown>[]>;
    pipelines(projectId: string | number, mergerequestIid: number, options?: Sudo): Promise<Record<string, unknown> | Record<string, unknown>[]>;
    rebase(projectId: string | number, mergerequestIid: number, options?: Sudo): Promise<Record<string, unknown>>;
    remove(projectId: string | number, mergerequestIid: number, options?: Sudo): Promise<Record<string, unknown>>;
    resetSpentTime(projectId: string | number, mergerequestIid: number, options?: Sudo): Promise<Record<string, unknown>>;
    resetTimeEstimate(projectId: string | number, mergerequestIid: number, options?: Sudo): Promise<Record<string, unknown>>;
    show(projectId: string | number, mergerequestIid: number, options?: ShowMergeRequestOptions & BaseRequestOptions): Promise<Record<string, unknown> | Record<string, unknown>[]>;
    subscribe(projectId: string | number, mergerequestIid: number, options?: Sudo): Promise<Record<string, unknown>>;
    timeStats(projectId: string | number, mergerequestIid: number, options?: Sudo): Promise<Record<string, unknown> | Record<string, unknown>[]>;
    version(projectId: string | number, mergerequestIid: number, versionId: number, options?: Sudo): Promise<Record<string, unknown> | Record<string, unknown>[]>;
    versions(projectId: string | number, mergerequestIid: number, options?: Sudo): Promise<Record<string, unknown> | Record<string, unknown>[]>;
    unsubscribe(projectId: string | number, mergerequestIid: number, options?: Sudo): Promise<Record<string, unknown>>;
}
