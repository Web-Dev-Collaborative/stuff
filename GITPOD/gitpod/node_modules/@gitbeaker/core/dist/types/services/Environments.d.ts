import { BaseService } from '@gitbeaker/requester-utils';
import { BaseRequestOptions, PaginatedRequestOptions, Sudo } from '../infrastructure';
import { DeploymentSchemaDefault, DeploymentSchemaCamelized, DeployableDefault, DeployableCamelized } from './Deployments';
import { ProjectSchemaDefault, ProjectSchemaCamelized } from './Projects';
export interface EnvironmentSchemaDefault {
    id: number;
    name: string;
    slug?: string;
    external_url?: string;
    project?: ProjectSchemaDefault;
    state?: string;
}
export interface EnvironmentSchemaCamelized {
    id: number;
    name: string;
    slug?: string;
    externalUrl?: string;
    project?: ProjectSchemaCamelized;
    state?: string;
}
export declare type EnvironmentSchema = EnvironmentSchemaDefault | EnvironmentSchemaCamelized;
export interface EnvironmentDetailSchemaDefault extends EnvironmentSchemaDefault {
    last_deployment?: DeploymentSchemaDefault;
    deployable?: DeployableDefault;
}
export interface EnvironmentDetailSchemaCamelized extends EnvironmentSchemaCamelized {
    lastDeployment?: DeploymentSchemaCamelized;
    deployable?: DeployableCamelized;
}
export declare type EnvironmentDetailSchema = EnvironmentDetailSchemaDefault | EnvironmentDetailSchemaCamelized;
export declare class Environments extends BaseService {
    all(projectId: string | number, options?: PaginatedRequestOptions): Promise<EnvironmentSchema[]>;
    show(projectId: string | number, environmentId: number, options?: Sudo): Promise<EnvironmentDetailSchema>;
    create(projectId: string | number, options?: BaseRequestOptions): Promise<Record<string, unknown>>;
    edit(projectId: string | number, environmentId: number, options?: BaseRequestOptions): Promise<Record<string, unknown>>;
    remove(projectId: string | number, environmentId: number, options?: Sudo): Promise<Record<string, unknown>>;
    stop(projectId: string | number, environmentId: number, options?: Sudo): Promise<Record<string, unknown>>;
}
