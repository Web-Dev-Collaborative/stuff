import { BaseService, BaseServiceOptions } from '@gitbeaker/requester-utils';
import { BaseRequestOptions, PaginatedRequestOptions, Sudo } from '../infrastructure';
import { AccessLevel } from './ResourceAccessRequests';
interface IncludeInherited {
    includeInherited?: boolean;
}
export declare class ResourceMembers extends BaseService {
    constructor(resourceType: string, options: BaseServiceOptions);
    add(resourceId: string | number, userId: number, accessLevel: AccessLevel, options?: BaseRequestOptions): Promise<Record<string, unknown>>;
    all(resourceId: string | number, { includeInherited, ...options }?: IncludeInherited & PaginatedRequestOptions): Promise<Record<string, unknown> | Record<string, unknown>[]>;
    edit(resourceId: string | number, userId: number, accessLevel: AccessLevel, options?: BaseRequestOptions): Promise<Record<string, unknown>>;
    show(resourceId: string | number, userId: number, { includeInherited, ...options }?: IncludeInherited & Sudo): Promise<Record<string, unknown> | Record<string, unknown>[]>;
    remove(resourceId: string | number, userId: number, options?: Sudo): Promise<Record<string, unknown>>;
}
export {};
