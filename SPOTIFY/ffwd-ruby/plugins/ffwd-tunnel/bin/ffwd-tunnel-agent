#!/usr/bin/env python
"""A reference tunneling proxy for FFWD."""

import time
import json
import asyncore
import sys
import socket
import struct
import logging
import errno
import argparse

log = logging.getLogger(__name__)

TEXT = object()
BINARY = object()
UDP = 'udp'
TCP = 'tcp'
RECV_MAX = 8192
DEFAULT_PROTOCOL = "text"
PROTOCOL_MAX_DATALEN = 2 ** 16
DEFAULT_PORT = 9000


class _BindUDP(asyncore.dispatcher):
    def __init__(self, family, tunnel, bindaddress, bindport):
        asyncore.dispatcher.__init__(self)
        self.create_socket(family, socket.SOCK_DGRAM)
        self.set_reuse_addr()
        self.bind((bindaddress, bindport))

        self._family = family
        self._tunnel = tunnel
        self._port = bindport

    def writable(self):
        return False

    def handle_read(self):
        """implement asyncore.dispatcher#handle_read"""
        data, addr = self.recvfrom(RECV_MAX)

        self._tunnel.client_data(
            socket.SOCK_DGRAM, self._family, self._port, addr, data)

    def receive_data(self, addr, data):
        family, addr, port = addr
        self.sendto(data, (addr, port))


class _BindTCP(asyncore.dispatcher):
    class Connection(asyncore.dispatcher_with_send):
        def __init__(self, bind, sock, addr):
            asyncore.dispatcher_with_send.__init__(self, sock)
            self.bind = bind
            self.addr = addr

        def handle_close(self):
            """implement asyncore.dispatcher_with_send#handle_close."""
            self.bind.conn_handle_close(self.addr)

        def handle_error(self):
            """implement asyncore.dispatcher_with_send#handle_error."""

        def handle_read(self):
            """implement asyncore.dispatcher#handle_read."""
            self.bind.conn_handle_data(self.addr, self.recv(RECV_MAX))

    def __init__(self, family, tunnel, bindaddress, bindport):
        asyncore.dispatcher.__init__(self)
        self.create_socket(family, socket.SOCK_STREAM)
        self.set_reuse_addr()
        self.bind((bindaddress, bindport))
        self.listen(5)

        self._family = family
        self._tunnel = tunnel
        self._port = bindport
        self._connections = dict()

    def handle_close(self):
        """implement asyncore.dispatcher#handle_close."""
        self.close()

    def handle_accept(self):
        """implement asyncore.dispatcher#handle_accept."""
        pair = self.accept()

        if pair is not None:
            sock, addr = pair
            log.debug("open tcp/%d: %s:%d", self._port, addr[0], addr[1])
            self._connections[addr] = self.Connection(self, sock, addr)
            self.client_state(addr, Protocol.OPEN)

    def conn_handle_data(self, addr, data):
        """Receive data from TCP connections."""
        self.client_data(addr, data)

    def conn_handle_close(self, addr):
        """Remove the client connection associated with addr."""
        log.debug("closed tcp/%d: %s:%d", self._port, addr[0], addr[1])

        client = self._connections[addr]
        client.close()

        del self._connections[addr]
        self.client_state(addr, Protocol.CLOSE)

    def client_data(self, addr, data):
        self._tunnel.client_data(
            socket.SOCK_STREAM, self._family, self._port, addr, data)

    def client_state(self, addr, state):
        self._tunnel.client_state(
            socket.SOCK_STREAM, self._family, self._port, addr, state)

    def close(self):
        for client in self._connections.values():
            client.close()

        self._connections = {}
        asyncore.dispatcher.close(self)

    def receive_data(self, addr, data):
        try:
            client = self._connections[addr]
        except KeyError:
            log.error("no such client: %s", addr)
            self.close()
            return

        client.send(data)


class _LineProtocol(object):
    delimiter = '\n'

    buffer_limit = 1048576

    def __init__(self):
        self._lp_buffer = ""
        self._lp_size = 0
        self._lp_limit = self.buffer_limit

    def set_mode(self, size):
        self._lp_size = size

    def handle_read(self):
        """implement asyncore.dispatcher#handle_read."""

        data = self.recv(RECV_MAX)

        if len(self._lp_buffer) + len(data) > self._lp_limit:
            log.error("buffer limit reached, closing connection")
            self.close()
            return

        if self._lp_size == 0:
            self._handle_line(data)
        else:
            self._handle_text(data)

    def _handle_line(self, data):
        while True:
            try:
                i = data.index(self.delimiter)
            except ValueError:
                break

            try:
                self.receive_line(self._lp_buffer + data[:i])
            except:
                log.error("receive_line failed", exc_info=sys.exc_info())
                self.close()
                return

            self._lp_buffer = ""
            data = data[i + 2:]

        if len(data) > 0:
            self._lp_buffer += data

    def _handle_text(self, data):
        self._lp_buffer += data

        while len(self._lp_buffer) >= self._lp_size:
            size = self._lp_size
            self._lp_size = 0

            try:
                self.receive_text(self._lp_buffer[:size])
            except:
                log.error("failed to receive text", exc_info=sys.exc_info())
                self.close()
                return

            self._lp_buffer = self._lp_buffer[size:]

    def send_line(self, line):
        """Send a line of data using the specified delimiter."""
        self.send(line + self.delimiter)


BIND_PROTOCOLS = {
    socket.SOCK_STREAM: _BindTCP,
    socket.SOCK_DGRAM: _BindUDP,
}


class Protocol(object):
    ST_HEADER = struct.Struct("!HHHBB")

    ST_STATE = struct.Struct("!H")
    ST_PEER_ADDR_AF_INET = struct.Struct("!4sH")
    ST_PEER_ADDR_AF_INET6 = struct.Struct("!16sH")

    STATE = 0x0000
    DATA = 0x0001

    OPEN = 0x0000
    CLOSE = 0x0001

    PACKET_TYPES = {
        STATE: ST_STATE,
        DATA: None,
    }

    def __init__(self, conn):
        self._header = None
        self._c = conn

    def parse_st_addr(self, family):
        if family == socket.AF_INET:
            return self.ST_PEER_ADDR_AF_INET

        if family == socket.AF_INET6:
            return self.ST_PEER_ADDR_AF_INET6

        raise Exception("Unsupported family: %d" % (family))

    def peer_addr_pack(self, family, addr):
        st_addr = self.parse_st_addr(family)
        ip, port = addr
        ip = socket.inet_pton(family, ip)
        return st_addr.pack(ip, port), st_addr.size

    def peer_addr_unpack(self, family, data):
        st_addr = self.parse_st_addr(family)
        ip, port = st_addr.unpack(data[:st_addr.size])
        ip = socket.inet_ntop(family, ip)
        return (ip, port), st_addr.size

    def client_data(self, protocol, family, port, addr, data):
        """Send client DATA."""
        addr, addr_size = self.peer_addr_pack(family, addr)

        length = self.ST_HEADER.size + addr_size + len(data)

        if length > PROTOCOL_MAX_DATALEN:
            raise Exception("Maximum possible frame length exceeded")

        header = self.ST_HEADER.pack(length, self.DATA, port, family, protocol)

        frame = header + addr + data
        self._c.send(frame)

    def client_state(self, protocol, family, port, addr, state):
        """Send a client STATE update."""
        addr_data, addr_size = self.peer_addr_pack(family, addr)

        length = self.ST_HEADER.size + addr_size + self.ST_STATE.size

        if length > PROTOCOL_MAX_DATALEN:
            raise Exception("Maximum possible frame length exceeded")

        header_data = self.ST_HEADER.pack(
            length, self.STATE, port, family, protocol)
        state_data = self.ST_STATE.pack(state)

        frame = header_data + addr_data + state_data
        self._c.send(frame)

    def setup(self):
        self._c.set_mode(self.ST_HEADER.size)

    def receive_line(self, line):
        raise Exception("did not expect line")

    def receive_text(self, data):
        if self._header is None:
            self._header = self.ST_HEADER.unpack(data)
            self._c.set_mode(self._header[0] - self.ST_HEADER.size)
            return

        length, frame_type, port, family, protocol = self._header
        addr, addr_size = self.peer_addr_unpack(family, data)
        rest = data[addr_size:]

        if frame_type == self.DATA:
            tunnel_id = (family, protocol, port)
            self._c.receive_data(tunnel_id, addr, rest)
        else:
            raise Exception("Unexpected frame type: %d" % (frame_type))

        self._c.set_mode(self.ST_HEADER.size)
        self._header = None


class TunnelClient(_LineProtocol, asyncore.dispatcher_with_send):
    def __init__(self, metadata, addr):
        asyncore.dispatcher_with_send.__init__(self)
        _LineProtocol.__init__(self)
        self.create_socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connect(addr)

        self._metadata = metadata
        self._tunnels = dict()
        self._protocol = None
        self._addr = addr

    def handle_error(self):
        """implement asyncore.dispatcher#handle_error."""
        exc_info = sys.exc_info()
        e = exc_info[1]

        if isinstance(e, socket.error):
            if e.errno == errno.ECONNREFUSED:
                log.warn("connection refused: %s", self._addr)
                self.close()
                return

        log.error("error: %s", str(exc_info[1]), exc_info=exc_info)
        self.close()

    def handle_close(self):
        """implement asyncore.dispatcher#handle_close."""
        log.info("closed")
        self.close()

    def close(self):
        for tunnel in self._tunnels.values():
            tunnel.close()

        self._tunnels = dict()
        self._protocol = None

        asyncore.dispatcher_with_send.close(self)

    def client_data(self, *args):
        if self._protocol is None:
            raise Exception("protocol is not configured")

        self._protocol.client_data(*args)

    def client_state(self, *args):
        if self._protocol is None:
            raise Exception("protocol is not configured")

        self._protocol.client_state(*args)

    def _receive_binary(self, protocol, bindport, addr, data):
        family = addr[0]
        ip = socket.inet_pton(addr[0], addr[1])
        port = addr[2]
        datasize = len(data)

        if datasize > PROTOCOL_MAX_DATALEN:
            raise Exception("Maximum data length exceeded")

        header = self.ST_HEADER.pack(
            protocol, bindport, family, ip, port, datasize)

        frame = header + data
        self.send(frame)

    def handle_connect(self):
        """implement asyncore.dispatcher#handle_connect."""
        log.info("connected")
        self.send_line(json.dumps(self._metadata))

    def receive_line(self, line):
        """implement _LineProtocol#receive_line."""

        if self._protocol is not None:
            raise Exception("protocol already configured")

        try:
            self._protocol = self.configure(line)
        except:
            log.error("failed to receive line", exc_info=sys.exc_info())
            self.close()
            return

        try:
            self._protocol.setup()
        except:
            log.error("failed to setup protocol", exc_info=sys.exc_info())
            self.close()
            return

    def configure(self, line):
        config = json.loads(line)
        log.info("CONFIG: %s", repr(config))

        if not self._bind_all(config):
            self.close()
            return

        return Protocol(self)

    def receive_text(self, data):
        if self._protocol is None:
            raise Exception("protocol is not configured")

        try:
            self._protocol.receive_text(data)
        except:
            log.error("failed to receive text", exc_info=sys.exc_info())
            self.close()

    def receive_data(self, tunnel_id, addr, data):
        try:
            tunnel = self._tunnels[tunnel_id]
        except KeyError:
            log.error("no such tunnel: %s", tunnel_id)
            return

        tunnel.receive_data(addr, data)

    def _bind_all(self, config):
        """Bind all protocol/port combinations from configuration."""
        bind = config.get('bind', [])

        for b in bind:
            tunnel_id = (b['family'], b['protocol'], b['port'])

            if tunnel_id in self._tunnels:
                log.error("Already bound: %s", repr(tunnel_id))
                continue

            try:
                family, protocol, port = tunnel_id
                protocol = BIND_PROTOCOLS[protocol]
                self._tunnels[tunnel_id] = protocol(
                    family, self, '127.0.0.1', port)
            except:
                log.error("failed to bind: %s", repr(b),
                          exc_info=sys.exc_info())
                continue

        if len(self._tunnels) != len(bind):
            log.error("unable to bind everything: %s", repr(bind))
            return False

        log.info("ports bound")
        return True


def hostip(string):
    if ':' not in string:
        return (string, DEFAULT_PORT)

    ip, port = string.split(':', 2)
    return (ip, int(port))

parser = argparse.ArgumentParser(sys.argv[0])

parser.add_argument(
    "-j", "--json-metadata", dest="json_metadata",
    help="Load metadata from JSON file.", metavar="<file>")

parser.add_argument(
    "-d", "--debug", dest="debug", action="store_const", const=True,
    default=False, help="Enable debugging.")

parser.add_argument(
    "-c", "--connect", dest="connect", default=('127.0.0.1', DEFAULT_PORT),
    type=hostip, metavar="<host>[:port]", help="Connect to the specified ")


def parse_args(args):
    ns = parser.parse_args(args)

    log_level = logging.INFO

    if ns.debug:
        log_level = logging.DEBUG

    logging.basicConfig(level=log_level)

    if ns.json_metadata:
        with open(ns.json_metadata) as f:
            ns.metadata = json.load(f)
    else:
        ns.metadata = dict()

    log.info("Metadata: %s", repr(ns.metadata))

    return ns


def _main(args):
    ns = parse_args(args)

    reconnect_timeout = 1.0

    while True:
        TunnelClient(ns.metadata, ns.connect)
        asyncore.loop()

        log.info("reconnecting in %ds", reconnect_timeout)
        time.sleep(reconnect_timeout)

if __name__ == "__main__":
    sys.exit(_main(sys.argv[1:]))
