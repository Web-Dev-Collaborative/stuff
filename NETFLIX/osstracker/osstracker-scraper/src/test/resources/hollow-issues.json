[
  {
    "url": "https://api.github.com/repos/Netflix/hollow/issues/167",
    "repository_url": "https://api.github.com/repos/Netflix/hollow",
    "labels_url": "https://api.github.com/repos/Netflix/hollow/issues/167/labels{/name}",
    "comments_url": "https://api.github.com/repos/Netflix/hollow/issues/167/comments",
    "events_url": "https://api.github.com/repos/Netflix/hollow/issues/167/events",
    "html_url": "https://github.com/Netflix/hollow/issues/167",
    "id": 293688606,
    "number": 167,
    "title": "Switch public APIs from File to Path",
    "user": {
      "login": "toolbear",
      "id": 358202,
      "avatar_url": "https://avatars3.githubusercontent.com/u/358202?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toolbear",
      "html_url": "https://github.com/toolbear",
      "followers_url": "https://api.github.com/users/toolbear/followers",
      "following_url": "https://api.github.com/users/toolbear/following{/other_user}",
      "gists_url": "https://api.github.com/users/toolbear/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toolbear/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toolbear/subscriptions",
      "organizations_url": "https://api.github.com/users/toolbear/orgs",
      "repos_url": "https://api.github.com/users/toolbear/repos",
      "events_url": "https://api.github.com/users/toolbear/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toolbear/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 493359046,
        "url": "https://api.github.com/repos/Netflix/hollow/labels/enhancement",
        "name": "enhancement",
        "color": "84b6eb",
        "default": true
      },
      {
        "id": 493359047,
        "url": "https://api.github.com/repos/Netflix/hollow/labels/help%20wanted",
        "name": "help wanted",
        "color": "128A0C",
        "default": true
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": {
      "url": "https://api.github.com/repos/Netflix/hollow/milestones/1",
      "html_url": "https://github.com/Netflix/hollow/milestone/1",
      "labels_url": "https://api.github.com/repos/Netflix/hollow/milestones/1/labels",
      "id": 3047143,
      "number": 1,
      "title": "Hollow 3.0",
      "description": "See Hollow 3.0 Roadmap in [Projects](https://github.com/Netflix/hollow/projects)",
      "creator": {
        "login": "toolbear",
        "id": 358202,
        "avatar_url": "https://avatars3.githubusercontent.com/u/358202?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/toolbear",
        "html_url": "https://github.com/toolbear",
        "followers_url": "https://api.github.com/users/toolbear/followers",
        "following_url": "https://api.github.com/users/toolbear/following{/other_user}",
        "gists_url": "https://api.github.com/users/toolbear/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/toolbear/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/toolbear/subscriptions",
        "organizations_url": "https://api.github.com/users/toolbear/orgs",
        "repos_url": "https://api.github.com/users/toolbear/repos",
        "events_url": "https://api.github.com/users/toolbear/events{/privacy}",
        "received_events_url": "https://api.github.com/users/toolbear/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 1,
      "closed_issues": 0,
      "state": "open",
      "created_at": "2018-01-19T01:07:59Z",
      "updated_at": "2018-02-01T21:27:37Z",
      "due_on": null,
      "closed_at": null
    },
    "comments": 0,
    "created_at": "2018-02-01T21:24:16Z",
    "updated_at": "2018-02-01T21:28:30Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "body": "* [ ] for all methods that accept `java.io.File` create an overload that accepts `java.nio.Path`\r\n* [ ] mark `java.io.File` methods as `@Deprecated`, use `file.asPath()` to delegate to new methods\r\n* [ ] use idiomatic `Path` and `Paths` code for opening files for reading/writing, interacting with directories, etc."
  },
  {
    "url": "https://api.github.com/repos/Netflix/hollow/issues/166",
    "repository_url": "https://api.github.com/repos/Netflix/hollow",
    "labels_url": "https://api.github.com/repos/Netflix/hollow/issues/166/labels{/name}",
    "comments_url": "https://api.github.com/repos/Netflix/hollow/issues/166/comments",
    "events_url": "https://api.github.com/repos/Netflix/hollow/issues/166/events",
    "html_url": "https://github.com/Netflix/hollow/issues/166",
    "id": 293292859,
    "number": 166,
    "title": "Diff tool should differentiate between null values and empty collections",
    "user": {
      "login": "toolbear",
      "id": 358202,
      "avatar_url": "https://avatars3.githubusercontent.com/u/358202?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toolbear",
      "html_url": "https://github.com/toolbear",
      "followers_url": "https://api.github.com/users/toolbear/followers",
      "following_url": "https://api.github.com/users/toolbear/following{/other_user}",
      "gists_url": "https://api.github.com/users/toolbear/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toolbear/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toolbear/subscriptions",
      "organizations_url": "https://api.github.com/users/toolbear/orgs",
      "repos_url": "https://api.github.com/users/toolbear/repos",
      "events_url": "https://api.github.com/users/toolbear/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toolbear/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 493359046,
        "url": "https://api.github.com/repos/Netflix/hollow/labels/enhancement",
        "name": "enhancement",
        "color": "84b6eb",
        "default": true
      },
      {
        "id": 493359047,
        "url": "https://api.github.com/repos/Netflix/hollow/labels/help%20wanted",
        "name": "help wanted",
        "color": "128A0C",
        "default": true
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2018-01-31T20:03:03Z",
    "updated_at": "2018-01-31T20:03:03Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "body": "When a collections field changes from `null` to a reference to Set|List|Map that is empty, the Diff and History UIs detect this as a difference, but then present no difference in the UI. Surface in the UI that the field changed from null to an empty collection (or vice versa)."
  },
  {
    "url": "https://api.github.com/repos/Netflix/hollow/issues/165",
    "repository_url": "https://api.github.com/repos/Netflix/hollow",
    "labels_url": "https://api.github.com/repos/Netflix/hollow/issues/165/labels{/name}",
    "comments_url": "https://api.github.com/repos/Netflix/hollow/issues/165/comments",
    "events_url": "https://api.github.com/repos/Netflix/hollow/issues/165/events",
    "html_url": "https://github.com/Netflix/hollow/issues/165",
    "id": 293288123,
    "number": 165,
    "title": "Ignore Set/Map reordering in Diff and History UIs",
    "user": {
      "login": "toolbear",
      "id": 358202,
      "avatar_url": "https://avatars3.githubusercontent.com/u/358202?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toolbear",
      "html_url": "https://github.com/toolbear",
      "followers_url": "https://api.github.com/users/toolbear/followers",
      "following_url": "https://api.github.com/users/toolbear/following{/other_user}",
      "gists_url": "https://api.github.com/users/toolbear/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toolbear/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toolbear/subscriptions",
      "organizations_url": "https://api.github.com/users/toolbear/orgs",
      "repos_url": "https://api.github.com/users/toolbear/repos",
      "events_url": "https://api.github.com/users/toolbear/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toolbear/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 493359046,
        "url": "https://api.github.com/repos/Netflix/hollow/labels/enhancement",
        "name": "enhancement",
        "color": "84b6eb",
        "default": true
      },
      {
        "id": 493359047,
        "url": "https://api.github.com/repos/Netflix/hollow/labels/help%20wanted",
        "name": "help wanted",
        "color": "128A0C",
        "default": true
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2018-01-31T19:47:58Z",
    "updated_at": "2018-01-31T19:47:58Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "body": "Reordered elements in a Set or Map will register as a difference, but then are presented in the UI as having no actual differences. Don't count Set or Map reordering as a difference at all to reduce noise in the diff UIs."
  },
  {
    "url": "https://api.github.com/repos/Netflix/hollow/issues/164",
    "repository_url": "https://api.github.com/repos/Netflix/hollow",
    "labels_url": "https://api.github.com/repos/Netflix/hollow/issues/164/labels{/name}",
    "comments_url": "https://api.github.com/repos/Netflix/hollow/issues/164/comments",
    "events_url": "https://api.github.com/repos/Netflix/hollow/issues/164/events",
    "html_url": "https://github.com/Netflix/hollow/issues/164",
    "id": 291664542,
    "number": 164,
    "title": "Delta chain - when announcement fails - consumer gets confused [bug/question]",
    "user": {
      "login": "rpalcolea",
      "id": 1625920,
      "avatar_url": "https://avatars2.githubusercontent.com/u/1625920?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rpalcolea",
      "html_url": "https://github.com/rpalcolea",
      "followers_url": "https://api.github.com/users/rpalcolea/followers",
      "following_url": "https://api.github.com/users/rpalcolea/following{/other_user}",
      "gists_url": "https://api.github.com/users/rpalcolea/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rpalcolea/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rpalcolea/subscriptions",
      "organizations_url": "https://api.github.com/users/rpalcolea/orgs",
      "repos_url": "https://api.github.com/users/rpalcolea/repos",
      "events_url": "https://api.github.com/users/rpalcolea/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rpalcolea/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2018-01-25T18:09:49Z",
    "updated_at": "2018-01-25T19:52:35Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "body": "Hi @toolbear \r\n\r\nWriting some tests around scenarios that we could face, for example when announcement fails for a delta state: \r\n\r\n```groovy\r\n  def 'incremental failure on announcer'() {\r\n    setup:\r\n    config.producerConfig.incremental = true\r\n    HollowProducer.Announcer spyAnnouncer = Spy(config.producerConfig.announcer.get().class, constructorArgs: [config.getDefaultRootDirectory()])\r\n    def localProducer = getProducer(new Module() {\r\n      @Override\r\n      void configure(Binder binder) {\r\n        binder.bind(HollowProducer.Announcer.class).toInstance(spyAnnouncer)\r\n      }\r\n    })\r\n    localProducer.hollowProducer\r\n    consumer = getConsumer()\r\n    List<Map> dataSet = (1..2).collect { createRandomAutomobile() }\r\n\r\n    when: 'initial snapshot cycle succeeds'\r\n    List<Automobile> automobiles = dataSet.collect { autoJson ->\r\n      parseAutomobile(autoJson)\r\n    }\r\n    localProducer.runCycle(automobiles)\r\n    consumer.triggerRefresh()\r\n\r\n    then: 'data should be there'\r\n    consumer.allDomainObjects.size() == 2\r\n\r\n    when: 'delta cycle with fails on announce'\r\n    List<Automobile> redAutomobiles = dataSet.collect { autoJson ->\r\n      autoJson.trim = 'red'\r\n      parseAutomobile(autoJson)\r\n    }\r\n    localProducer.runCycle(redAutomobiles)\r\n\r\n    then: 'announcer should throw exception'\r\n    1 * spyAnnouncer.announce(_) >> {\r\n      throw new RuntimeException('ouch') }\r\n    thrown(RuntimeException)\r\n\r\n    when:\r\n    consumer.triggerRefresh()\r\n\r\n    then: 'consumer should reflect old data and trim should stay yellow'\r\n    consumer.allDomainObjects.size() == 2\r\n    consumer.allDomainObjects.collect { it.getObject('trim') }.unique().first().toString() == 'yellow'\r\n\r\n    when: 'delta cycle with addition'\r\n    List<Automobile> purpleAutomobiles = dataSet.collect { autoJson ->\r\n      autoJson.trim = 'purple'\r\n      parseAutomobile(autoJson)\r\n    }\r\n    long version = localProducer.runCycle(purpleAutomobiles)\r\n    consumer.triggerRefresh()\r\n\r\n    then: 'addition should be there'\r\n    consumer.allDomainObjects.size() == 2\r\n    consumer.allDomainObjects.collect { it.getObject('trim') }.unique().first().toString() == 'purple'\r\n  }\r\n```\r\n\r\nIn this case what we observe is that Hollow will generate deltas from version 20180125180054001 to 20180125180054002 and 20180125180054001 to 20180125180054003. Because 20180125180054002 failed, the 3rd cycle will try to write a delta from \"1\" to \"3\".\r\n\r\n![screen shot 2018-01-25 at 12 01 51 pm](https://user-images.githubusercontent.com/1625920/35404146-8be7d4b4-01c7-11e8-909e-6df8e3581652.png)\r\n\r\nThen if trigger a refresh in the consumer, since the latest announced version is \"20180125180054003\", it will try to apply that, however, `HollowUpdatePlanner` determines that the next `deltaDestinationVersion` should be \"20180125180054002\" https://github.com/Netflix/hollow/blob/96bafff7fe9eda842df62b47cdc3f5372afda4cb/hollow/src/main/java/com/netflix/hollow/api/client/HollowUpdatePlanner.java#L80\r\n\r\nLooks like `destinationVersion` in `HollowUpdatePlan` only knows about 1 transition:\r\n \r\n![screen shot 2018-01-25 at 12 06 25 pm](https://user-images.githubusercontent.com/1625920/35404351-4945d790-01c8-11e8-8c0f-a57585e59624.png)\r\n\r\nIn this case when `triggerRefresh` happens, it will go to version 20180125180054002 and if you do another `triggerRefresh` it will fail because there is no update plan from 20180125180054002 to 20180125180054003. \r\n\r\nOur workaround for now is to restart the producer that way it creates a snapshot once it's restored.\r\n\r\nWe don't know if this is an issue or if we are doing something wrong. Also, wonder if we should not fail when announcement fails. Wonder if it makes sense to commit a change and then announce? https://github.com/Netflix/hollow/blob/339b29431b9915a08ecc12c9555480d6391ce225/hollow/src/main/java/com/netflix/hollow/api/producer/HollowProducer.java#L456. Guess the consumers will pick up the \"missing delta\" on the next announcement since the file should be available.\r\n\r\n\r\nWonder if this would also be a use case for `HollowStateDeltaPatcherTest`\r\n\r\nAny thoughts?\r\n\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/Netflix/hollow/issues/162",
    "repository_url": "https://api.github.com/repos/Netflix/hollow",
    "labels_url": "https://api.github.com/repos/Netflix/hollow/issues/162/labels{/name}",
    "comments_url": "https://api.github.com/repos/Netflix/hollow/issues/162/comments",
    "events_url": "https://api.github.com/repos/Netflix/hollow/issues/162/events",
    "html_url": "https://github.com/Netflix/hollow/issues/162",
    "id": 291343525,
    "number": 162,
    "title": "IncrementalProducer doesn't delete orphans with new Types in deltas [bug/question?]",
    "user": {
      "login": "rpalcolea",
      "id": 1625920,
      "avatar_url": "https://avatars2.githubusercontent.com/u/1625920?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rpalcolea",
      "html_url": "https://github.com/rpalcolea",
      "followers_url": "https://api.github.com/users/rpalcolea/followers",
      "following_url": "https://api.github.com/users/rpalcolea/following{/other_user}",
      "gists_url": "https://api.github.com/users/rpalcolea/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rpalcolea/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rpalcolea/subscriptions",
      "organizations_url": "https://api.github.com/users/rpalcolea/orgs",
      "repos_url": "https://api.github.com/users/rpalcolea/repos",
      "events_url": "https://api.github.com/users/rpalcolea/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rpalcolea/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2018-01-24T20:10:32Z",
    "updated_at": "2018-01-24T22:23:50Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "body": "`HollowIncrementalProducer` doesn't cleanup orphan objects if the type was not present in the first snapshot (introduced a new Type in a delta).\r\n\r\nturns out `HollowReadStateEngine.typeStates` doesn't add a type once you write a delta, only when snapshot.\r\n\r\nhere is wehre type states are added\r\n\r\nhttps://github.com/Netflix/hollow/blob/d4b574e5f4e941b9fd8faf9a2c52125a05f417f6/hollow/src/main/java/com/netflix/hollow/core/read/engine/HollowReadStateEngine.java#L96\r\n\r\nand looks like\r\n\r\nhttps://github.com/Netflix/hollow/blob/12f94a903a765a8a63de8046d2c846398e11d236/hollow/src/main/java/com/netflix/hollow/core/read/engine/HollowBlobReader.java#L196\r\n\r\nSo any time the incremental producer tries to delete orphan objects for types that are added in a delta, using:\r\n\r\nhttps://github.com/Netflix/hollow/blob/79e6eb2f2c621ab5cccda2669f81f36de93bb594/hollow/src/main/java/com/netflix/hollow/api/producer/HollowIncrementalCyclePopulator.java#L50\r\n\r\nto retrieve the type and determine which ordinals to remove returns a `null` type.\r\n\r\nI was thinking on adding `stateEngine.addTypeState(typeState)` in https://github.com/Netflix/hollow/blob/12f94a903a765a8a63de8046d2c846398e11d236/hollow/src/main/java/com/netflix/hollow/core/read/engine/HollowBlobReader.java#L208 but found out that multiple instances of `HollowReadStateEngine` are created and `HollowIncrementalCyclePopulator` it's using one that doesn't have the new types.\r\n\r\nAny suggestion for fixing this bug? I think I'm a little lost on this portion of  `HollowReadStateEngine`. While an initial snapshot should contain most of the possible hollow types, there could be a scenario where a new type is added later in a delta chain. "
  },
  {
    "url": "https://api.github.com/repos/Netflix/hollow/issues/159",
    "repository_url": "https://api.github.com/repos/Netflix/hollow",
    "labels_url": "https://api.github.com/repos/Netflix/hollow/issues/159/labels{/name}",
    "comments_url": "https://api.github.com/repos/Netflix/hollow/issues/159/comments",
    "events_url": "https://api.github.com/repos/Netflix/hollow/issues/159/events",
    "html_url": "https://github.com/Netflix/hollow/issues/159",
    "id": 291215206,
    "number": 159,
    "title": "ArrayOutOfBoundException: -1 when searching by Hash Index",
    "user": {
      "login": "dzmitryh",
      "id": 5390492,
      "avatar_url": "https://avatars2.githubusercontent.com/u/5390492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dzmitryh",
      "html_url": "https://github.com/dzmitryh",
      "followers_url": "https://api.github.com/users/dzmitryh/followers",
      "following_url": "https://api.github.com/users/dzmitryh/following{/other_user}",
      "gists_url": "https://api.github.com/users/dzmitryh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dzmitryh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dzmitryh/subscriptions",
      "organizations_url": "https://api.github.com/users/dzmitryh/orgs",
      "repos_url": "https://api.github.com/users/dzmitryh/repos",
      "events_url": "https://api.github.com/users/dzmitryh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dzmitryh/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2018-01-24T13:49:24Z",
    "updated_at": "2018-01-24T13:49:24Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "Hey guys! Would like to share with you my issue.\r\n\r\n## Description:\r\n\r\nWhen I try to use hash index and then search by it I get `ArrayOutOfBoundException`\r\n\r\nIt is based on this sources https://github.com/Netflix/hollow/blob/7324212d7a892f5a04ee4d83885683042ad5a166/hollow/src/test/java/com/netflix/hollow/core/index/HollowHashIndexTest.java#L32\r\nindex example: \r\n```\r\nHollowHashIndex index = new HollowHashIndex(readStateEngine, \"TypeB\", \"\", \"b1.value\");\r\n```\r\n\r\n## Stack trace:\r\n```\r\njava.lang.ArrayIndexOutOfBoundsException: -1\r\n\r\n\tat com.netflix.hollow.core.memory.encoding.FixedLengthElementArray.getElementValue(FixedLengthElementArray.java:94)\r\n\tat com.netflix.hollow.core.memory.encoding.FixedLengthElementArray.getElementValue(FixedLengthElementArray.java:85)\r\n\tat com.netflix.hollow.core.read.engine.object.HollowObjectTypeReadStateShard.readString(HollowObjectTypeReadStateShard.java:216)\r\n\tat com.netflix.hollow.core.read.engine.object.HollowObjectTypeReadState.readString(HollowObjectTypeReadState.java:188)\r\n\tat com.netflix.hollow.core.read.HollowReadFieldUtils.fieldValueEquals(HollowReadFieldUtils.java:193)\r\n\tat com.netflix.hollow.core.index.HollowHashIndex.matchIsEqual(HollowHashIndex.java:165)\r\n\tat com.netflix.hollow.core.index.HollowHashIndex.findMatches(HollowHashIndex.java:103)\r\n\tat com.netflix.hollow.core.index.HollowHashIndexTest.testIndexingColonIncludedValuesThrowsArrayOutOfBound(HollowHashIndexTest.java:95)\r\n```\r\n\r\n## Unit test:\r\nI've created unit test in latest sources to reproduce it:\r\n\r\n```\r\n    @Test\r\n    public void testIndexingColonIncludedValuesThrowsArrayOutOfBound() throws IOException {\r\n        HollowObjectMapper mapper = new HollowObjectMapper(writeStateEngine);\r\n\r\n        final String b1ContainsColon = \"one:\";\r\n        mapper.add(new TypeB(null));\r\n\r\n        roundTripSnapshot();\r\n\r\n        HollowHashIndex index = new HollowHashIndex(readStateEngine, \"TypeB\", \"\", \"b1.value\");\r\n        index.findMatches(b1ContainsColon);\r\n    }\r\n```\r\n## Observations:\r\n* if u delete `colon` symbol from `b1ContainsColon` variable the test passes;\r\n* if u fill `new TypeB(\"some-value\")` with some value problem is gone as well.\r\n\r\nLet me know if u need any other details."
  },
  {
    "url": "https://api.github.com/repos/Netflix/hollow/issues/155",
    "repository_url": "https://api.github.com/repos/Netflix/hollow",
    "labels_url": "https://api.github.com/repos/Netflix/hollow/issues/155/labels{/name}",
    "comments_url": "https://api.github.com/repos/Netflix/hollow/issues/155/comments",
    "events_url": "https://api.github.com/repos/Netflix/hollow/issues/155/events",
    "html_url": "https://github.com/Netflix/hollow/issues/155",
    "id": 290548343,
    "number": 155,
    "title": "HollowIncrementalProducer refactor [proposal]",
    "user": {
      "login": "tinetti",
      "id": 379405,
      "avatar_url": "https://avatars1.githubusercontent.com/u/379405?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tinetti",
      "html_url": "https://github.com/tinetti",
      "followers_url": "https://api.github.com/users/tinetti/followers",
      "following_url": "https://api.github.com/users/tinetti/following{/other_user}",
      "gists_url": "https://api.github.com/users/tinetti/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tinetti/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tinetti/subscriptions",
      "organizations_url": "https://api.github.com/users/tinetti/orgs",
      "repos_url": "https://api.github.com/users/tinetti/repos",
      "events_url": "https://api.github.com/users/tinetti/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tinetti/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2018-01-22T17:24:41Z",
    "updated_at": "2018-01-23T18:38:40Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "I'd like to take a shot at refactoring the `HollowIncrementalProducer` implementation in order to accomplish two things:\r\n1. remove the `mutations` field in order to avoid storing objects multiple times in memory\r\n2. modify the `runCycle` method so that it matches the usage pattern of the regular `HollowProducer.runCycle`"
  },
  {
    "url": "https://api.github.com/repos/Netflix/hollow/issues/154",
    "repository_url": "https://api.github.com/repos/Netflix/hollow",
    "labels_url": "https://api.github.com/repos/Netflix/hollow/issues/154/labels{/name}",
    "comments_url": "https://api.github.com/repos/Netflix/hollow/issues/154/comments",
    "events_url": "https://api.github.com/repos/Netflix/hollow/issues/154/events",
    "html_url": "https://github.com/Netflix/hollow/issues/154",
    "id": 290037771,
    "number": 154,
    "title": "HollowIncrementalProducer - include first cycle [proposal]",
    "user": {
      "login": "rpalcolea",
      "id": 1625920,
      "avatar_url": "https://avatars2.githubusercontent.com/u/1625920?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rpalcolea",
      "html_url": "https://github.com/rpalcolea",
      "followers_url": "https://api.github.com/users/rpalcolea/followers",
      "following_url": "https://api.github.com/users/rpalcolea/following{/other_user}",
      "gists_url": "https://api.github.com/users/rpalcolea/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rpalcolea/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rpalcolea/subscriptions",
      "organizations_url": "https://api.github.com/users/rpalcolea/orgs",
      "repos_url": "https://api.github.com/users/rpalcolea/repos",
      "events_url": "https://api.github.com/users/rpalcolea/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rpalcolea/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2018-01-19T16:45:02Z",
    "updated_at": "2018-01-19T16:45:56Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "body": "While `HollowIncrementalProducer` serves of a purpose of delta processing, it requires a existing state in order to work.\r\n\r\nWonder if there is a desire for allow creating a `HollowIncrementalProducer` that also supports writing the first state if no previous available.\r\n\r\nWhat we do in our side, is basically run a cycle with another `Populator` what only adds objects to the state:\r\n\r\nThis is an example on our side, `ParallelExecution` is irrevelant for this example.\r\n\r\n```java\r\npublic class CyclePopulator implements HollowProducer.Populator {\r\n\r\n  private final Collection<Object> objList;\r\n  private final ParallelExecution parallelExecution;\r\n\r\n  CyclePopulator(Collection<Object> objList) {\r\n    this(objList, 1.0d);\r\n  }\r\n\r\n  CyclePopulator(Collection<Object> objList, double threadsPerCpu) {\r\n    this.objList = objList;\r\n    this.parallelExecution = new ParallelExecution(threadsPerCpu);\r\n  }\r\n\r\n  @Override\r\n  public void populate(HollowProducer.WriteState newState) throws Exception {\r\n    parallelExecution.execute(objList, (Object obj) -> newState.add(obj));\r\n  }\r\n}\r\n```\r\n\r\nWe basically decide if we use `CyclePopulator` or `HollowIncrementalCyclePopulator` based on the existence of a previous state while restoring or not."
  },
  {
    "url": "https://api.github.com/repos/Netflix/hollow/issues/149",
    "repository_url": "https://api.github.com/repos/Netflix/hollow",
    "labels_url": "https://api.github.com/repos/Netflix/hollow/issues/149/labels{/name}",
    "comments_url": "https://api.github.com/repos/Netflix/hollow/issues/149/comments",
    "events_url": "https://api.github.com/repos/Netflix/hollow/issues/149/events",
    "html_url": "https://github.com/Netflix/hollow/issues/149",
    "id": 289041599,
    "number": 149,
    "title": "HollowIncrementalProducer - Retry cycles [proposal]",
    "user": {
      "login": "rpalcolea",
      "id": 1625920,
      "avatar_url": "https://avatars2.githubusercontent.com/u/1625920?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rpalcolea",
      "html_url": "https://github.com/rpalcolea",
      "followers_url": "https://api.github.com/users/rpalcolea/followers",
      "following_url": "https://api.github.com/users/rpalcolea/following{/other_user}",
      "gists_url": "https://api.github.com/users/rpalcolea/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rpalcolea/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rpalcolea/subscriptions",
      "organizations_url": "https://api.github.com/users/rpalcolea/orgs",
      "repos_url": "https://api.github.com/users/rpalcolea/repos",
      "events_url": "https://api.github.com/users/rpalcolea/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rpalcolea/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 809386837,
        "url": "https://api.github.com/repos/Netflix/hollow/labels/proposal",
        "name": "proposal",
        "color": "0052cc",
        "default": false
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2018-01-16T20:15:10Z",
    "updated_at": "2018-01-19T01:05:35Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "body": "Hi @toolbear,\r\n\r\nWe were doing some extra work with incremental producer. Currently, when a cycle fails... either by populate, announce or publish (https://github.com/Netflix/hollow/blob/master/hollow/src/main/java/com/netflix/hollow/api/producer/HollowProducer.java#L423), the incremental producer bubbles the `Exception` and the `mutations` `ConcurrentHashMap` keeps the objects for the next cycle. In the next cycle, you will likely pick up the new objects + failed objects in previous cycle. \r\n\r\nWhile this is great, we were thinking in a scenario where your  blob storage (S3 or GCS for this particular case) is down or with incidents.. we have seen incidents up to 3 hours last year, wouldn't be nice to have a retry logic option? This way if a cycle fails for a particular exception type, you could retry publishing your snapshot or delta.  The main driver for this is to prevent `mutations` from growing for hours if something is wrong with the blob storage or just in between failed cycles. \r\n\r\nSomething along the lines of:\r\n\r\n```groovy\r\nHollowIncrementalProducer.withProducer(producer)\r\n   .withRetryConfig(myRetryConfig)\r\n   .withThreadsPerCPU(1.0d)\r\n```\r\n\r\nwhere `RetryConfig`:\r\n\r\n```groovy\r\nclass RetryConfig {\r\n   boolean enabled \r\n   long timeBetweenRetries\r\n   int numberOfRetries\r\n}\r\n```\r\n\r\nThen `runCycle` (https://github.com/Netflix/hollow/blob/master/hollow/src/main/java/com/netflix/hollow/api/producer/HollowIncrementalProducer.java#L76) could have some logic to read the `RetryConfig` and setup something simple as retries with `sleep` and 'x' number of retries.\r\n\r\nWhile it would be nice to make it only for particular cases like publishing issues, Hollow bubbles only a `RuntimeException` (no sub-class). In order to avoid refactoring the `runCycle` internals or introducing custom exceptions (which I think could be nice in the future), this could be achieved only by bubbling the `RuntimeException` and catch it.\r\n\r\nWhile all of this could be achieved outside of Hollow while wrapping the `incrementalProducer.runCycle()` in a retry logic block, we think it could be useful for others to provide this in the incremental producer.\r\n\r\nPlease let me know your thoughts\r\n\r\ncc @adamkeyser\r\n"
  },
  {
    "url": "https://api.github.com/repos/Netflix/hollow/issues/148",
    "repository_url": "https://api.github.com/repos/Netflix/hollow",
    "labels_url": "https://api.github.com/repos/Netflix/hollow/issues/148/labels{/name}",
    "comments_url": "https://api.github.com/repos/Netflix/hollow/issues/148/comments",
    "events_url": "https://api.github.com/repos/Netflix/hollow/issues/148/events",
    "html_url": "https://github.com/Netflix/hollow/issues/148",
    "id": 288408562,
    "number": 148,
    "title": "HollowIncrementalProducer - Execution Stats [Proposal]",
    "user": {
      "login": "rpalcolea",
      "id": 1625920,
      "avatar_url": "https://avatars2.githubusercontent.com/u/1625920?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rpalcolea",
      "html_url": "https://github.com/rpalcolea",
      "followers_url": "https://api.github.com/users/rpalcolea/followers",
      "following_url": "https://api.github.com/users/rpalcolea/following{/other_user}",
      "gists_url": "https://api.github.com/users/rpalcolea/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rpalcolea/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rpalcolea/subscriptions",
      "organizations_url": "https://api.github.com/users/rpalcolea/orgs",
      "repos_url": "https://api.github.com/users/rpalcolea/repos",
      "events_url": "https://api.github.com/users/rpalcolea/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rpalcolea/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 809386837,
        "url": "https://api.github.com/repos/Netflix/hollow/labels/proposal",
        "name": "proposal",
        "color": "0052cc",
        "default": false
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2018-01-14T13:29:57Z",
    "updated_at": "2018-01-19T16:24:05Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "body": "Hi @toolbear \r\n\r\nWhile working with `HollowIncrementalProducer`, I found that it would be nice if the result of `runCycle` had more information than the `version`. I believe users could use some stats like `recordsAddedOrModified` and `recordsRemoved`\r\n\r\nWhat are your thoughts on introducing a `HollowIncrementalProducerExecution` object that would look like this (or `HollowIncrementalProducerCycleResult`?):\r\n\r\n```\r\nclass HollowIncrementalProducerExecution {\r\n   long version\r\n   long recordsAddedOrModified\r\n   long recordsRemoved\r\n   long timestamp\r\n   Status status // SUCCESS, FAIL -> could be a boolean too\r\n}\r\n```\r\n\r\nThis would help users to set some metrics or alerting based on the behavior. While `Validators` are a potential candidate for this there are two blockers for this:\r\n\r\n1. The validators are triggered by `Validator.validate` which is a `void`, so in case you need metrics, you need to bake your metrics or alerting into the validator (not a problem of course).\r\n\r\n2. `Validator` only has access to the `ReadState` so the detail on added/modified gets lost, while you can determine how many were added or deleted based on cardinality, the modifications detail is not available or probably yes?, only the incremental producer could know the number of adds/modified and deletes on a easy fashion because it's responsible for modifying the `mutations` object. \r\n\r\n3. I don't think a `Validator` should be implemented just for getting metrics on the dataset.\r\n\r\nDon't know if this is something that you could see as useful for Hollow users. We do expose a lot of metrics, we currently track how many objects we add/modify/delete on each cycle. While the validators are helpful to fail a cycle if we want to drop for example... 3% of our data, the metrics are helping us to visualize how our dataset evolves over time.\r\n\r\nthoughts?"
  },
  {
    "url": "https://api.github.com/repos/Netflix/hollow/issues/145",
    "repository_url": "https://api.github.com/repos/Netflix/hollow",
    "labels_url": "https://api.github.com/repos/Netflix/hollow/issues/145/labels{/name}",
    "comments_url": "https://api.github.com/repos/Netflix/hollow/issues/145/comments",
    "events_url": "https://api.github.com/repos/Netflix/hollow/issues/145/events",
    "html_url": "https://github.com/Netflix/hollow/issues/145",
    "id": 287282240,
    "number": 145,
    "title": "Pinning Consumers - integration",
    "user": {
      "login": "rpalcolea",
      "id": 1625920,
      "avatar_url": "https://avatars2.githubusercontent.com/u/1625920?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rpalcolea",
      "html_url": "https://github.com/rpalcolea",
      "followers_url": "https://api.github.com/users/rpalcolea/followers",
      "following_url": "https://api.github.com/users/rpalcolea/following{/other_user}",
      "gists_url": "https://api.github.com/users/rpalcolea/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rpalcolea/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rpalcolea/subscriptions",
      "organizations_url": "https://api.github.com/users/rpalcolea/orgs",
      "repos_url": "https://api.github.com/users/rpalcolea/repos",
      "events_url": "https://api.github.com/users/rpalcolea/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rpalcolea/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 809386837,
        "url": "https://api.github.com/repos/Netflix/hollow/labels/proposal",
        "name": "proposal",
        "color": "0052cc",
        "default": false
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2018-01-10T01:02:00Z",
    "updated_at": "2018-01-19T01:06:40Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "body": "Hi @toolbear,\r\n\r\nI was wondering if there are plans to introduce the [\"Pinning Consumers\"](http://hollow.how/infrastructure/#pinning-consumers) mechanism as a default in Hollow.\r\n\r\nI think it would be nice if we could know when a consumer is pinned and expose this via the metrics or the API. something like `consumer.isPinned()` and/or `consumer.getPinnedVersion()`. This could help to triage issues when you have tens/hundreds of consumers with the same dataset but because of the nature of eventual consistency, a few of them could be stuck. \r\n\r\nI don't have a clear idea on how this could be accomplish, my guess is that the `AnnouncementWatcher` could be modified to support the pinning mechanism and `HollowConsumer` expose the information, similar to:\r\n\r\n```java\r\npublic long getCurrentVersionId() {\r\n        return updater.getCurrentVersionId();\r\n}\r\n```\r\n\r\nSomething like\r\n\r\n```java\r\npublic long getPinnedVersion() {\r\n        return announcementWatcher.getPinnedVersion();\r\n} \r\n```\r\n\r\nIt would be up to the users to store the pinned version in the `announcementWatcher` or read it from their database/blob storage every time they need this. `getPinnedVersion` should be another abstract method in `AnnouncementWatcher`.\r\n\r\nFrom the `HollowProducer` perspective, I think Hollow could provide a `versionPinner` in the builder that takes an `VersionPinner` (new interface). e.g.\r\n\r\n```java\r\nHollowProducer producer = HollowProducer.withPublisher(new FakeBlobPublisher())\r\n                                                .withAnnouncer(new MyAnnouncer(tmpFolder))\r\n                                                .withVersionPinner(new MyVersionPinner());\r\n```\r\n\r\nThen, probably the `HollowProducer` could have a `pin`Version method that takes the version number as an argument and invokes ` versionPinner.pin(long pinnedVersion)`. This way users could programmatically pin version from the producer either by background jobs based on their own business rules or as simple as expose the `pinVersion` as a HTTP endpoint.\r\n\r\nAlso it could have the `unpin`. \r\n\r\nthoughts?\r\n  "
  },
  {
    "url": "https://api.github.com/repos/Netflix/hollow/issues/143",
    "repository_url": "https://api.github.com/repos/Netflix/hollow",
    "labels_url": "https://api.github.com/repos/Netflix/hollow/issues/143/labels{/name}",
    "comments_url": "https://api.github.com/repos/Netflix/hollow/issues/143/comments",
    "events_url": "https://api.github.com/repos/Netflix/hollow/issues/143/events",
    "html_url": "https://github.com/Netflix/hollow/issues/143",
    "id": 286910122,
    "number": 143,
    "title": "Support multi-byte UTF-8 characters in explorer UI",
    "user": {
      "login": "toolbear",
      "id": 358202,
      "avatar_url": "https://avatars3.githubusercontent.com/u/358202?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toolbear",
      "html_url": "https://github.com/toolbear",
      "followers_url": "https://api.github.com/users/toolbear/followers",
      "following_url": "https://api.github.com/users/toolbear/following{/other_user}",
      "gists_url": "https://api.github.com/users/toolbear/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toolbear/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toolbear/subscriptions",
      "organizations_url": "https://api.github.com/users/toolbear/orgs",
      "repos_url": "https://api.github.com/users/toolbear/repos",
      "events_url": "https://api.github.com/users/toolbear/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toolbear/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 493359042,
        "url": "https://api.github.com/repos/Netflix/hollow/labels/bug",
        "name": "bug",
        "color": "ee0701",
        "default": true
      },
      {
        "id": 493359047,
        "url": "https://api.github.com/repos/Netflix/hollow/labels/help%20wanted",
        "name": "help wanted",
        "color": "128A0C",
        "default": true
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2018-01-08T22:32:05Z",
    "updated_at": "2018-01-31T20:16:05Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "body": "If data in dataset is stored in multi-byte UTF-8 the explorer UI will render them with encoding errors.\r\n\r\nThis is likely a bug in diff and history UIs as well."
  },
  {
    "url": "https://api.github.com/repos/Netflix/hollow/issues/141",
    "repository_url": "https://api.github.com/repos/Netflix/hollow",
    "labels_url": "https://api.github.com/repos/Netflix/hollow/issues/141/labels{/name}",
    "comments_url": "https://api.github.com/repos/Netflix/hollow/issues/141/comments",
    "events_url": "https://api.github.com/repos/Netflix/hollow/issues/141/events",
    "html_url": "https://github.com/Netflix/hollow/issues/141",
    "id": 280723474,
    "number": 141,
    "title": "HollowIncrementalProducer question",
    "user": {
      "login": "brettwooldridge",
      "id": 1538661,
      "avatar_url": "https://avatars0.githubusercontent.com/u/1538661?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brettwooldridge",
      "html_url": "https://github.com/brettwooldridge",
      "followers_url": "https://api.github.com/users/brettwooldridge/followers",
      "following_url": "https://api.github.com/users/brettwooldridge/following{/other_user}",
      "gists_url": "https://api.github.com/users/brettwooldridge/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brettwooldridge/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brettwooldridge/subscriptions",
      "organizations_url": "https://api.github.com/users/brettwooldridge/orgs",
      "repos_url": "https://api.github.com/users/brettwooldridge/repos",
      "events_url": "https://api.github.com/users/brettwooldridge/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brettwooldridge/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 493359050,
        "url": "https://api.github.com/repos/Netflix/hollow/labels/question",
        "name": "question",
        "color": "cc317c",
        "default": true
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2017-12-09T14:21:39Z",
    "updated_at": "2018-01-19T01:00:56Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "body": "I have a question about the ``HollowIncrementalProducer``.  I'll give an example to use as the basis of my question; albeit somewhat artificial.\r\n\r\nGiven these classes...\r\n```java\r\nclass Movie {\r\n   int movieId;\r\n   String title;\r\n   Set<Actor> actors;\r\n}\r\n\r\nclass Actor {\r\n  int actorId;\r\n  String firstName;\r\n  String lastName;\r\n}\r\n```\r\nWe would like to produce deltas based on incremental changes, rather than fully loading everything from the source of truth every time.  We are currently implementing this by hand, using the low-level API -- created before either ``HollowProducer`` *or* ``HollowIncrementalProducer`` existed.  But we would love to move to the ``HollowIncrementalProducer`` due to its simplicity.\r\n\r\nThe behavior we are looking for is:\r\n * Deletion of an ``Actor`` results in the removal from all ``Movie.actors`` sets.\r\n * Deletion of a ``Movie`` removes both the Movie and its ``actors`` set, but does not remove the referenced ``Actor`` objects if they are referenced by other ``Movie``s.\r\n * Ideally, but not required, is the removal of an ``Actor`` if it is no longer referenced by *any* ``Movie`` (i.e. no orphans).\r\n\r\nIs this scenario currently supported by the ``HollowIncrementalProducer``?\r\n\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/Netflix/hollow/issues/140",
    "repository_url": "https://api.github.com/repos/Netflix/hollow",
    "labels_url": "https://api.github.com/repos/Netflix/hollow/issues/140/labels{/name}",
    "comments_url": "https://api.github.com/repos/Netflix/hollow/issues/140/comments",
    "events_url": "https://api.github.com/repos/Netflix/hollow/issues/140/events",
    "html_url": "https://github.com/Netflix/hollow/issues/140",
    "id": 280453505,
    "number": 140,
    "title": "It's not possible to start a consumer application when blob store directory is empty",
    "user": {
      "login": "tdudzik",
      "id": 6402694,
      "avatar_url": "https://avatars1.githubusercontent.com/u/6402694?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tdudzik",
      "html_url": "https://github.com/tdudzik",
      "followers_url": "https://api.github.com/users/tdudzik/followers",
      "following_url": "https://api.github.com/users/tdudzik/following{/other_user}",
      "gists_url": "https://api.github.com/users/tdudzik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tdudzik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tdudzik/subscriptions",
      "organizations_url": "https://api.github.com/users/tdudzik/orgs",
      "repos_url": "https://api.github.com/users/tdudzik/repos",
      "events_url": "https://api.github.com/users/tdudzik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tdudzik/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 493359042,
        "url": "https://api.github.com/repos/Netflix/hollow/labels/bug",
        "name": "bug",
        "color": "ee0701",
        "default": true
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 7,
    "created_at": "2017-12-08T11:06:06Z",
    "updated_at": "2018-01-19T01:06:04Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "When you are trying to start an application and create indexes and your blob store dir is empty the following exceptions are thrown:\r\n\r\n- for primary key index:\r\n```\r\njava.lang.NullPointerException\r\n\tat com.netflix.hollow.api.client.HollowClientUpdater.getStateEngine(HollowClientUpdater.java:166)\r\n\tat com.netflix.hollow.api.consumer.HollowConsumer.getStateEngine(HollowConsumer.java:246)\r\n\tat [your-api-package].[IndexName]PrimaryKeyIndex.<init>([IndexName]PrimaryKeyIndex.java:15)\r\n```\r\n\r\n- for hash index:\r\n```\r\njava.lang.NullPointerException\r\n\tat com.netflix.hollow.api.client.HollowClientUpdater.getAPI(HollowClientUpdater.java:170)\r\n\tat com.netflix.hollow.api.consumer.HollowConsumer.getAPI(HollowConsumer.java:260)\r\n\tat [your-api-package].[ApiName]APIHashIndex.<init>([ApiName]APIHashIndex.java:25)\r\n```\r\n\r\nBoth exceptions are related to `HollowClientUpdater#hollowDataHolder` field which is `null` in that case."
  },
  {
    "url": "https://api.github.com/repos/Netflix/hollow/issues/101",
    "repository_url": "https://api.github.com/repos/Netflix/hollow",
    "labels_url": "https://api.github.com/repos/Netflix/hollow/issues/101/labels{/name}",
    "comments_url": "https://api.github.com/repos/Netflix/hollow/issues/101/comments",
    "events_url": "https://api.github.com/repos/Netflix/hollow/issues/101/events",
    "html_url": "https://github.com/Netflix/hollow/issues/101",
    "id": 260050420,
    "number": 101,
    "title": "Hollow Documentation ",
    "user": {
      "login": "rpalcolea",
      "id": 1625920,
      "avatar_url": "https://avatars2.githubusercontent.com/u/1625920?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rpalcolea",
      "html_url": "https://github.com/rpalcolea",
      "followers_url": "https://api.github.com/users/rpalcolea/followers",
      "following_url": "https://api.github.com/users/rpalcolea/following{/other_user}",
      "gists_url": "https://api.github.com/users/rpalcolea/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rpalcolea/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rpalcolea/subscriptions",
      "organizations_url": "https://api.github.com/users/rpalcolea/orgs",
      "repos_url": "https://api.github.com/users/rpalcolea/repos",
      "events_url": "https://api.github.com/users/rpalcolea/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rpalcolea/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 493359046,
        "url": "https://api.github.com/repos/Netflix/hollow/labels/enhancement",
        "name": "enhancement",
        "color": "84b6eb",
        "default": true
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 7,
    "created_at": "2017-09-24T01:41:38Z",
    "updated_at": "2018-01-19T01:06:20Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "body": "Are there plans to open source the docs in http://hollow.how? It would be nice to contribute with things like the incremental producer, google cloud storage and other examples"
  },
  {
    "url": "https://api.github.com/repos/Netflix/hollow/issues/90",
    "repository_url": "https://api.github.com/repos/Netflix/hollow",
    "labels_url": "https://api.github.com/repos/Netflix/hollow/issues/90/labels{/name}",
    "comments_url": "https://api.github.com/repos/Netflix/hollow/issues/90/comments",
    "events_url": "https://api.github.com/repos/Netflix/hollow/issues/90/events",
    "html_url": "https://github.com/Netflix/hollow/issues/90",
    "id": 254168702,
    "number": 90,
    "title": "Record count validator without producer restore on startup cannot prevent large changes on first cycle after startup",
    "user": {
      "login": "lkancode",
      "id": 22181777,
      "avatar_url": "https://avatars0.githubusercontent.com/u/22181777?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lkancode",
      "html_url": "https://github.com/lkancode",
      "followers_url": "https://api.github.com/users/lkancode/followers",
      "following_url": "https://api.github.com/users/lkancode/following{/other_user}",
      "gists_url": "https://api.github.com/users/lkancode/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lkancode/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lkancode/subscriptions",
      "organizations_url": "https://api.github.com/users/lkancode/orgs",
      "repos_url": "https://api.github.com/users/lkancode/repos",
      "events_url": "https://api.github.com/users/lkancode/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lkancode/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 493359042,
        "url": "https://api.github.com/repos/Netflix/hollow/labels/bug",
        "name": "bug",
        "color": "ee0701",
        "default": true
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2017-08-30T23:53:00Z",
    "updated_at": "2018-01-19T01:06:04Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "body": ""
  },
  {
    "url": "https://api.github.com/repos/Netflix/hollow/issues/72",
    "repository_url": "https://api.github.com/repos/Netflix/hollow",
    "labels_url": "https://api.github.com/repos/Netflix/hollow/issues/72/labels{/name}",
    "comments_url": "https://api.github.com/repos/Netflix/hollow/issues/72/comments",
    "events_url": "https://api.github.com/repos/Netflix/hollow/issues/72/events",
    "html_url": "https://github.com/Netflix/hollow/issues/72",
    "id": 246794207,
    "number": 72,
    "title": "NullPointer - Hollow History UI",
    "user": {
      "login": "marcuscavalcanti",
      "id": 8884419,
      "avatar_url": "https://avatars3.githubusercontent.com/u/8884419?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/marcuscavalcanti",
      "html_url": "https://github.com/marcuscavalcanti",
      "followers_url": "https://api.github.com/users/marcuscavalcanti/followers",
      "following_url": "https://api.github.com/users/marcuscavalcanti/following{/other_user}",
      "gists_url": "https://api.github.com/users/marcuscavalcanti/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/marcuscavalcanti/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/marcuscavalcanti/subscriptions",
      "organizations_url": "https://api.github.com/users/marcuscavalcanti/orgs",
      "repos_url": "https://api.github.com/users/marcuscavalcanti/repos",
      "events_url": "https://api.github.com/users/marcuscavalcanti/events{/privacy}",
      "received_events_url": "https://api.github.com/users/marcuscavalcanti/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 493359042,
        "url": "https://api.github.com/repos/Netflix/hollow/labels/bug",
        "name": "bug",
        "color": "ee0701",
        "default": true
      },
      {
        "id": 493359047,
        "url": "https://api.github.com/repos/Netflix/hollow/labels/help%20wanted",
        "name": "help wanted",
        "color": "128A0C",
        "default": true
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2017-07-31T15:21:13Z",
    "updated_at": "2018-01-31T20:18:58Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "Hi guys, I'm getting a NullPointerException when I access Hollow History UI.\r\n\r\nI'm using hollow-reference-implementation (hollow lib version: 2.6.8).\r\n\r\nComplete stacktrace:\r\n\r\n`java.lang.NullPointerException\r\n\tat com.netflix.hollow.tools.history.keyindex.HollowHistoryTypeKeyIndex.queryIndexedFields(HollowHistoryTypeKeyIndex.java:218)\r\n\tat com.netflix.hollow.history.ui.pages.HistoryQueryPage.typeQueryKeyMatches(HistoryQueryPage.java:65)\r\n\tat com.netflix.hollow.history.ui.pages.HistoryQueryPage.setUpContext(HistoryQueryPage.java:47)\r\n\tat com.netflix.hollow.history.ui.pages.HistoryPage.render(HistoryPage.java:54)\r\n\tat com.netflix.hollow.history.ui.HollowHistoryUI.handle(HollowHistoryUI.java:151)\r\n\tat com.netflix.hollow.history.ui.jetty.HollowHistoryHandler.handle(HollowHistoryHandler.java:38)\r\n\tat org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:134)\r\n\tat org.eclipse.jetty.server.Server.handle(Server.java:518)\r\n\tat org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:308)\r\n\tat org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:244)\r\n\tat org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:273)\r\n\tat org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:95)\r\n\tat org.eclipse.jetty.io.SelectChannelEndPoint$2.run(SelectChannelEndPoint.java:93)\r\n\tat org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.produceAndRun(ExecuteProduceConsume.java:246)\r\n\tat org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.run(ExecuteProduceConsume.java:156)\r\n\tat org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:654)\r\n\tat org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:572)\r\n\tat java.lang.Thread.run(Thread.java:745)`\r\n\r\nEverything works fine with Hollow Explorer UI."
  }
]